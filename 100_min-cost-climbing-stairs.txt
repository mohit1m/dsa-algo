/*
https://leetcode.com/problems/min-cost-climbing-stairs
*/
public class Solution {
    /*
    TC: O(n)
    SC: O(n)
    */
   /* public int Solve(int[] cost, int n, int[] dp) {
        if(n==0) {
            return cost[0];
        }
        if(n==1) {
            return cost[1];
        }
        if(dp[n]!=-1) {
            return dp[n];
        }
        return dp[n] = cost[n]+Math.Min(Solve(cost, n-1, dp) ,Solve(cost, n-2, dp));
    }
    public int MinCostClimbingStairs(int[] cost) {
       int n=cost.Length;
        int[] dp = new int[n+1];
        int[] newCost = new int[cost.Length+1];
        for(int i=0; i<cost.Length; i++) {
            newCost[i] = cost[i];
        }
        newCost[n]=0;
        Array.Fill(dp,-1);
        return Solve(newCost,n,dp);
    } */
    /*
    TC: O(n)
    SC: O(1)
    */
    public int MinCostClimbingStairs(int[] cost) {
        int n = cost.Length;
        for(int i=n-3; i>=0; i--) {
            cost[i]+= Math.Min(cost[i+1], cost[i+2]);
        }
        return Math.Min(cost[0], cost[1]);
    }
 }

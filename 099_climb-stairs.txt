/*
https://leetcode.com/problems/climbing-stairs/description/
*/

public class Solution {
    //TC: O(n)
    //SC: O(n)
    public int Solve(int n, int[] dp) {
      if(n == 0) {
          return 1;
      }
      if(n < 0) {
          return 0;
      }
      if(dp[n] != -1) {
          return dp[n];
      }
      return dp[n] = Solve(n-1, dp) + Solve(n-2, dp);
    }   


    //TC: O(n)
    //SC: O(n)
    public int SolveTab(int n) {
        int[] dp = new int[n+1];
        dp[0] = 1;
        dp[1] = 1;
        for(int i=2; i<=n; i++) {
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }

    //TC: O(n)
    //SC: O(1)
    public int SolveTabOptimized(int n) {
        int climb1 = 1;
        int climb2 = 1;
           if(n == 1) {
            return 1;
        }
        for(int i=2; i<=n; i++) {
            int current = climb1 + climb2;
            climb2 = climb1;
            climb1 = current;
        }
        return climb1;
    }


    public int ClimbStairs(int n) {
        int[] dp = new int[n+1];
        Array.Fill(dp,-1);
       // return Solve(n, dp);
       // return SolveTab(n);
       return SolveTabOptimized(n);
    }
}
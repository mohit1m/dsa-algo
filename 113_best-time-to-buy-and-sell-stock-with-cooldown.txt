/*
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/
*/
public class Solution {
    /*
    TC: O(n)
    SC: O(n)
    */
    private int Solve(int index, int[] prices, int n , int buy, int[,] dp) {
        if(index >= n) {
            return 0;
        }
        if(dp[index, buy] != -1) {
            return dp[index, buy];
        }
        int profit = 0;
        int cooldown = Solve(index+1, prices, n, buy, dp);
        if(buy == 1) {
            int buyStock = -prices[index] + Solve(index+1, prices, n, 0, dp);
            profit = Math.Max(buyStock , cooldown);
        } else {
            int sell = prices[index] + Solve(index+2, prices, n, 1, dp);            
            profit = Math.Max(sell, cooldown);
        }
        return dp[index, buy] = profit;
    }

    private int SolveTab(int[] prices, int n) {
         int[,] dp = new int[n+2 , 2];
         for(int index = n-1; index>=0; index--) {
             for(int buy=0; buy<2; buy++) {
                 int profit = 0;
                 int cooldown = dp[index+1, buy];
                    if(buy == 1) {
                        int buyStock = -prices[index] + dp[index+1, 0];
                        profit = Math.Max(buyStock , cooldown);
                    } else {
                        int sell = prices[index] + dp[index+2, 1];            
                        profit = Math.Max(sell, cooldown);
                    }
                    dp[index, buy] = profit;
             }
         }
         return dp[0,1];
    }

    /*
    TC: O(n)
    SC: O(1)
    */
     private int SolveTabOptimized(int[] prices, int n) {
          //int[,] dp = new int[n+2 , 2];
          int[] curr = new int[2];
          int[] next1 = new int[2];
          int[] next2 = new int[2];
         for(int index = n-1; index>=0; index--) {
             for(int buy=0; buy<2; buy++) {
                 int profit = 0;
                 int cooldown = next1[buy];
                    if(buy == 1) {
                        int buyStock = -prices[index] + next1[0];
                        profit = Math.Max(buyStock , cooldown);
                    } else {
                        int sell = prices[index] + next2[1];            
                        profit = Math.Max(sell, cooldown);
                    }
                    curr[buy] = profit;
             }
             Array.Copy(next1,next2,2);
             Array.Copy(curr,next1,2);
         }
         return next1[1];        
    }

    public int MaxProfit(int[] prices) {
        int n = prices.Length;
        int buy  = 1;
        int index = 0;
        int[,] dp = new int[n,2];
        for(int i=0; i<n; i++) {
            for(int j=0; j<2; j++) {
                dp[i,j] = -1;
            }
        }
        //return Solve(index, prices, n, buy, dp);   
        //return SolveTab(prices, n);     
        return SolveTabOptimized(prices, n);
    }
}
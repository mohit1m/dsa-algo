/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {this.val = x; this.next = null;}
 * }
 */
class Solution {
    
    public ListNode FindMiddle(ListNode head) {
        if(head==null || head.next == null) {
            return head;
        }
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast!=null && fast.next!=null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    public ListNode Merge(ListNode left, ListNode right) {
        ListNode dummy = new ListNode();
        ListNode result = dummy;
    
        
        while(left!=null && right!=null) {
            if(left.val <= right.val) {
                result.next = left;
                left = left.next;
            } else {
                result.next = right;
                right = right.next;
            }
            result = result.next;
        }
        
        if(left!=null) {
            result.next = left;
        }
        if(right!=null) {
            result.next = right;
        }
        return dummy.next;
    }
   
    // 1 2  3 4  5
    // 1  2 3 4 5 6
    public ListNode sortList(ListNode head) {
        if(head==null || head.next == null) {
            return head;
        }
        
        ListNode middle = FindMiddle(head);
        ListNode left = head;
        ListNode right = middle.next;
        middle.next = null;
        
        left = sortList(left);
        right = sortList(right);
        return Merge(left,right);
    }
}

1 Use .toList() to convert dict values to list
Priority Queues first parameter can have local variables defined.
2 Count for collection property
MinHeap is default implementation of PriorityQueue in C#.
Lowest no has highest priority. The lowest priority element will be removed first.
So, minimum frequency element will be removed first on dequeuing.
For i = any no. ,  str[i] = 'c', use single codes.
3 .Length return rows*column
4 .GetLength(0) return no of rows
5 .GetLength(1) return no of columns
int rows = board.Length;
int cols = board[0].Length;
For trying to add HashSet for first time, use TryAdd eg:-
      rowsHashMap.TryAdd(i, new HashSet<char>());
Remember: Cannot modify num in a for each loop
6 Remember to check out of range condition like left<right with while loops and also user char.ToLower(str[i]) for lowercase conversion
For 3 sums unique, we will need to add conditions to avoid duplicates:-
a)   if(i>0 && nums[i-1] == nums[i])   {
               continue;
            } 
b)    if(a+b+c == target) { 
	left++;
	while(left<right && nums[left] == nums[left-1]) {
                left++;
       	    }
	}
For tapping rainwater, for setting boundaries left++ or right-- needs to be executed as first condition.
7 Window length = right-left+1;
Always check for hashMap.ConatinsKey condition when comparing 2 hashmaps  to avoid any key not found exception
8 Substring() -> str.Substring(startIndex, length);    Substring( start , Length);  abc   (1,2) => bc
8a Use LinkedList to represent a dequeue and to perform AddFirst(), AddLast(), q.First.Value, q.Last.Value for
maximum element ina window of size k implementation with O(n) complexity
8b For min stack with O(1) , use long datatype to avoid precision error, add value like (2L*val - min) if val is int
Push
====
If stack -> empty, add element , min->element
i) val >= mini , push elemnet
ii) val<mini  push 2*current-mini and update mini=current 
Pop
====
i) val>= mini just pop 
ii) val<mini, mini will be 2*mini - current
Top
====
i) val>= mini , peek element will be top
ii) val<mini, mini will be top element
8c Tuple property accessed with Item1, Item2
8d For car fleet, save the position,speed in tuple, sort by position, add entries one by one to stack
and check if time for 1st <= 2nd last and pop. Resulting stack count will be the answer.
8e The length will be height[i] and breadth would be (nextSmallest[i] -1)-(prevSmallest[i]+1)+1 = nextSmallest[i]-prevSmallest[i]-1.
Remember, if nextSmallest[i]=-1, we should set to nextSmallest[i]=n, to avoid area from being -ve.
8f For 2d, binary search think rows 0 to n-1 first, consider; for greater cols = cols-1 and smaller cols=0.
8g For koko eating bananas, the start=1 and not start=0 as hour will start from 1 and end=piles.Max();
9 in pivot use ,while start<end , = not there ;but is there with arr[mid]>=arr[0]
Better is to use minmum in an array but with index approach without any issues.
9a To find minimum in rotated array   3 4 | 5 | 1 2, if arr[mid]>=arr[start], set start = mid+1
Store the min for mid and result value. If arr[start]<arr[end], set result to Math.min(result,start);
9b Use minimum in an array algo as given above in 9a, and use conditions with pivot.
9c Time based data structure :- Dictionary<string,List<string,int)>>,
Store the result for start...mid as we need to get the the value if it was previously set.
9d Median of 2 sorted arrays:-
Use (m+n+1)/2 to get the value of half.
Always run binary search on smaller array. Take start as 0 and end as len(smallarray)-1
	int i = start+(end-start)/2;
	int j = half - i;
	If left1>right2 we need to set end = i-1, otherwise start=i+1
9e Reorder List. Remember to set  slow.next =null; and the linking part
first=head, second=prev,  we can go till second is null.It will always be >= length of first part.
10 Slow and fast pointer to find middle slow+1 when fast reaches end or is out of boundary will return second part of the list.
Need to check for null codition for fast and fast.next
	    ListNode temp1 = first.next;
            ListNode temp2 = second.next;
            first.next = second;
            second.next = temp1;
            first = temp1;
            second = temp2;
10a To remove nth , we need a dummy node in front of head, so that we can first move right by n and then move left untill right is null.
10b For random pointer copy, remember for base condition if head==null, return null.Keep a hashMap for new copyNode List.
10c For merge k sorted list, use i+2 increment in for loop.
 	ListNode[] mergedLists = new ListNode[(lists.Length+1)/2];
  	mergedLists[i/2] = MergeLists(list1,list2);
10d For LRU Cache
    GET - Return -1 if not in cache. If in cache, REMOVE from deque , ADDFIRST to dequeue, return value
    PUT - If in cache already, remove from cache and dequeue, ADDFIRST to dequeue and add FIRST to cache. If capacity exceeds remove 	 
          from LAST pointer of deque and remove from cache.
10e For reversing in group k, return head if cannot iterate till k, while reversing have an extra condition to keep track of count
and then set head.next = RecursiveFunction(next,k) and return prev.
10f In subtree of a tree if (subtree == null) return true, as null is also a subtree of any tree.
We check for sameTree for a node and return true , otherwise we check SubTree for left or right side.
10g For LCA if both left and right values are less than root search in left side and vice versa.
10h In binary order traversal, we  need an inner loop till size of the queue
10i For right size we can check if list.Count == level for adding right side view
10j For valid BST, adjust limits [-inf,root,val] [root.val,inf]
10k For kth smallest element return left if it is -1, i.e. if solution is found on the left side.
10l index>=n && start>end, return null for constructing tree fom preorder and inorder
10m For kth largest use minHeap and for kth smallest use maxhHeap of size k.
10n For task scheduler, use a queue and add tasks with timePassed+coolOffTime alongwith maxHeap
10o For twitter, we use maxHeaps and when we dequeue , we add from 2nd last tweet from the followee to queue, so it like merge sort.
Please remember to clear maxHeap before getting new feeds.
Add Follow(userId, userId) has user should see his own feed. Also use a hashset for Dictionary<int, HashSet<int>> followerHashMap;
11 Trie : use recursion for . match and remember to return false. Use Dictionary<char,TrieNode> for keeping track of all children nodes.
11a For subset, take or not take and the alsways add a new list to result  result.Add(new List<int>(subset));
11b For combination sum, 2 cases arise:-
1. Reduce target and use same index
2. Keep same target and increment index by 1
Add if target == 0 and return if target<0 || index>=n
11c For subsets, we take one index, fix it and swap the no at that index.
        for(int i=index; i<nums.Length; i++) {
            Swap(nums, i, index);
            Solve(index+1, nums, permutation, result);
            Swap(nums,i, index);
        }
11d For unique combination , first sort and then use for the right side tree to avoid duplicates
  while(index+1 <nums.Length && nums[index] == nums[index+1]) {
    index++;
  } 
and then pass index+1 in recursion calls.
12.    PriorityQueue<int,int> maxHeap = new PriorityQueue<int,int>(
        Comparer<int>.Create((a, b) => b.CompareTo(a));
13 Remember to add deep copy of list using new operator for combination sum
13.1 Use a foor loop for index in recursion and use str.Substring(i, i-index+1) for palindrome partition 
13.2 For letter combination create a new string for recursion and to remove use RemoveAt(str.Length-1)
13.3 For n queen, use hashMap for cols, +ve diagonal(row+cols) and -ve diagonal(row-cols).
Add to result if rows>=n
	For jagged array , use 	int[][] jagged_arr = new int[n][];
	Initialize the elements
        jagged_arr[0] = new int[n] 
14 For max area of island use 1 + DFS1 + DFS2 + DF3 + DFS4
14.1 For pacific atlantic ,  we can have DFS for pac,atl from row 0 and last row and then col 0 and col-1 and find union.
14.2 For surrounded regions, run DFS from row 0, last row,col 0, last cols and set to T wherver we have O
Set all other O to X
Set all T to O 
14.3 For walls and gates , use BFS from walls.
14.4 Couse schedule course that has to be completed  first i spart of adj list.
14.5 Couse schedule || - use topolgical sort, with 1st course completed added first in List
14.6 Use union and find for redundant connection
14.7 For valid graph if visitedHasSet.Count == n and there is no cycle starting from node 0.
14.8 For cycle in directed graph, use DFSVisisted Set
14.9 For cycle in undirected grpah, use parent=-1 and parent = node and see if there is abackedge to parent node from child nodes
14.10 Union and find remember for connected components
No of connected components = n -( No. of unions)
15 Adj list can be created as dictionary with list of neighbors
 	Dictionary<int, List<int>> preCoursesMap = new();
        for(int i=0; i<numCourses; i++) {
            preCoursesMap[i] = new List<int>();
        }
        foreach(var pre in prerequisites) {
            var courseToTake = pre[0];
            var courseDependsOn = pre[1];
            preCoursesMap[courseToTake].Add(courseDependsOn);
        }
15.1   Create adjacency list for words with patter as key and add beginWord to wordList if it does not contain it.
Beter to use HashSet<string>(), List<string> also work though.
	foreach(var word in wordList) {
            for(int i=0; i<word.Length; i++) {
                string pattern = word.Substring(0, i) + "*" + word.Substring(i + 1);;
                adjList.TryAdd(pattern, new HashSet<string>());
                adjList[pattern].Add(word);
            }
        }
15 Set dp[0]=0 for min no of ways for coin change
16 For word break problem
dp[i] = dp[i + word.Length];                    
17 Set default max to 1 for LIS
18 LCS answer will be dp[m,n]
19 For rotate right by 90 , rotate diagonal and then by column
For rotate left by 90, rotate by column and then by diagonal
20 No of counting bits in a range, remember

	if(2*offset == i)  {
                offset = i;
            }
        dp[i] = 1 + dp[i-offset];
21 Remember
Set bit    (bit>>i) | 1     Get bit  (n>>i) & 1
22 Plus 1 , Better reverse or start from end, remember 9 and carry, only carry and no carry
23 Matrix multiplication - Always reverse. Set(i+j)th position  and carry in (i+j+1)
var reversedNum1 = new string(num1.Reverse().ToArray());
	for(int i=0; i<m; i++) {
            for(int j=0; j<n ; j++) {
                int digit = (reversedNum1[i]-'0') * (reversedNum2[j]-'0');
                int temp = result[i+j] + digit;
                result[i+j+1] += temp/10;
                result[i+j] = temp%10;
            }
        }
24 With dictionary we can use hashMap.GetValueOrDefault((pX, y),0) like this.
25 For hand of straight remove only if count is 0.
26 For valid parenthesis maintain leftMin and leftMax, if leftMax<0 break. If finally, leftMin == 0 return true;
27 While changing array in dp solution , remember to use Array.Copy(source, destination,length);
28 With interleaving check this condition s1[index1] == s3[index1+index2]
29 Redundant connection - Use union and find
30 Use dictionary.TryAdd if not sure that key in dict exists
31 Itineary reconstruction. While backtracking , remove the price from n-1 index
32 BellmanFord n-1 times distance[v] = min(distance[v], distance[u] + weight(u, v))
K stops remember to copy the temp array
33 For edges return -1 for leaf and 2+height(left)+height(right)
34 2 step approach with hashmap for copying random pointers
35 LRU Cache = Doubly ended queue with hashMap
LinkedList can be used for doubly ended queue
AddFirst() -> add at front , Propertied Last -> rear and First-> front.
36 Min Stack Push -> Pushed value = 2*current- min => if min<curr
and popped value = 2*min - value
37 Remove last charcater stringbuilder sb.Remove(index-1,1);
38 For car fleet, check if 2nd time car <= 1st time of car. Sort by position in reverse order.
if(stack.Count > 1 && stack.Peek() <= stack.Skip(1).First()) {
                stack.Pop();
            }     
39 Remember for histogram
Area = height[i]*(next-prev-1)
 if(nextSmallest[i]==-1) {
                nextSmallest[i]= n;
            }
40 No of total combination of pairs n*(n-1)/2
41 Burst balloons. Remember to add 1 at each boundary
42 Interleaving string check for either string is str[i+j]

Setting a Bit:
===============
To set a particular bit n in a number x, you can use the expression x |= (1 << n).
Clearing a Bit:
===============
To clear a particular bit n in a number x, you can use the expression x &= ~(1 << n).
Toggling a Bit:
===============
To toggle (flip) a particular bit n in a number x, you can use the expression x ^= (1 << n).
Checking if a Bit is Set:
=========================
To check if a particular bit n is set in a number x, you can use the expression (x & (1 << n)) != 0. This will evaluate to true if the bit is set and false if it's not
Getting the rightmost set digit
================================
Either x & -x    or we can use 
x & ~(x - 1) 

Use CompareTo instead of a-b with sorting.

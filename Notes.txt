1 Use .toList() to convert dict values to list
Priority Queues first parameter can have local variables defined.
2 Count for collection property
MinHeap is default implementation of PriorityQueue in C#.
Lowest no has highest priority. The lowest priority element will be removed first.
So, minimum frequency element will be removed first on dequeuing.
For i = any no. ,  str[i] = 'c', use single codes.
3 .Length return rows*column
4 .GetLength(0) return no of rows
5 .GetLength(1) return no of columns
int rows = board.Length;
int cols = board[0].Length;
For trying to add HashSet for first time, use TryAdd eg:-
      rowsHashMap.TryAdd(i, new HashSet<char>());
Remember: Cannot modify num in a for each loop
6 Remember to check out of range condition like left<right with while loops and also user char.ToLower(str[i]) for lowercase conversion
For 3 sums unique, we will need to add conditions to avoid duplicates:-
a)   if(i>0 && nums[i-1] == nums[i])   {
               continue;
            } 
b)    if(a+b+c == target) { 
	left++;
	while(left<right && nums[left] == nums[left-1]) {
                left++;
       	    }
	}
For tapping rainwater, for setting boundaries left++ or right-- needs to be executed as first condition.
7 Window length = right-left+1;
Always check for hashMap.ContainsKey condition when comparing 2 hashmaps  to avoid any key not found exception
8 Substring() -> str.Substring(startIndex, length);    Substring( start , Length);  abc   (1,2) => bc
8a Use LinkedList to represent a dequeue and to perform AddFirst(), AddLast(), q.First.Value, q.Last.Value for
maximum element ina window of size k implementation with O(n) complexity
8b For min stack with O(1) , use long datatype to avoid precision error, add value like (2L*val - min) if val is int
Push
====
If stack -> empty, add element , min->element
i) val >= mini , push elemnet
ii) val<mini  push 2*current-mini and update mini=current 
Pop
====
i) val>= mini just pop 
ii) val<mini, mini will be 2*mini - current
Top
====
i) val>= mini , peek element will be top
ii) val<mini, mini will be top element
8c Tuple property accessed with Item1, Item2
8d For car fleet, save the position,speed in tuple, sort by position, add entries one by one to stack
and check if time for 1st <= 2nd last and pop. Resulting stack count will be the answer.
8e The length will be height[i] and breadth would be (nextSmallest[i] -1)-(prevSmallest[i]+1)+1 = nextSmallest[i]-prevSmallest[i]-1.
Remember, if nextSmallest[i]=-1, we should set to nextSmallest[i]=n, to avoid area from being -ve.
8f For 2d, binary search think rows 0 to n-1 first, consider; for greater cols = cols-1 and smaller cols=0.
8g For koko eating bananas, the start=1 and not start=0 as hour will start from 1 and end=piles.Max();
8h For finding the next greater no for LIS, we need to set index=-1, if arr[mid]>=target , update it and return. If it is not -1,
we should update the value. = is needed to overwrite same value
9 in pivot use ,while start<end , = not there ;but is there with arr[mid]>=arr[0]
Better is to use minmum in an array but with index approach without any issues.
9a To find minimum in rotated array   3 4 | 5 | 1 2, if arr[mid]>=arr[start], set start = mid+1
Store the min for start and result value. If arr[start]<=arr[end] in the base case, return result
	Another Approach
	=================
	1. If arr[start]<=arr[end] in the base case, return result
	2. if arr[mid]>=arr[start], set start = mid+1
	3. Else end = mid
	4. Return start at the end
9b Use minimum in an array algo as given above in 9a, and use conditions with pivot.
9b.1 To find peak if(arr[mid]<arr[mid+1])  set start = mid+1
Return start eventually
9c Time based data structure :- Dictionary<string,List<string,int)>>,
Store the result for start...mid as we need to get the the value if it was previously set.
9d Median of 2 sorted arrays:-
Use (m+n+1)/2 to get the value of half.
Always run binary search on smaller array. Take start as 0 and end as len(smallarray)-1
	int i = start+(end-start)/2;
	int j = half - i;
	If left1>right2 we need to set end = i-1, otherwise start=i+1
9e Reorder List. Remember to set  slow.next =null; and the linking part
first=head, second=prev,  we can go till second is null.It will always be >= length of first part.
10 Slow and fast pointer to find middle slow+1 when fast reaches end or is out of boundary will return second part of the list.
Need to check for null codition for fast and fast.next
	    ListNode temp1 = first.next;
            ListNode temp2 = second.next;
            first.next = second;
            second.next = temp1;
            first = temp1;
            second = temp2;
10a To remove nth , we need a dummy node in front of head, so that we can first move right by n and then move left untill right is null.
10b For random pointer copy, remember for base condition if head==null, return null.Keep a hashMap for new copyNode List.
10c For merge k sorted list, use i+2 increment in for loop.
 	ListNode[] mergedLists = new ListNode[(lists.Length+1)/2];
  	mergedLists[i/2] = MergeLists(list1,list2);
10d For LRU Cache
    GET - Return -1 if not in cache. If in cache, REMOVE from deque , ADDFIRST to dequeue, return value
    PUT - If in cache already, remove from cache and dequeue, ADDFIRST to dequeue and add FIRST to cache. If capacity exceeds remove 	 
          from LAST pointer of deque and remove from cache.
10e For reversing in group k, return head if cannot iterate till k, while reversing have an extra condition to keep track of count
and then set head.next = RecursiveFunction(next,k) and return prev.
10f In subtree of a tree if (subtree == null) return true, as null is also a subtree of any tree.
We check for sameTree for a node and return true , otherwise we check SubTree for left or right side.
10g For LCA if both left and right values are less than root search in left side and vice versa.
10h In binary order traversal, we  need an inner loop till size of the queue
10i For right size we can check if list.Count == level for adding right side view
10j For valid BST, adjust limits [-inf,root,val] [root.val,inf]
10k For kth smallest element return left if it is -1, i.e. if solution is found on the left side.
10l index>=n && start>end, return null for constructing tree fom preorder and inorder
10m For kth largest use minHeap and for kth smallest use maxhHeap of size k.
10n For task scheduler, use a queue and add tasks with timePassed+coolOffTime alongwith maxHeap
10o For twitter, we use maxHeaps and when we dequeue , we add from 2nd last tweet from the followee to queue, so it like merge sort.
Please remember to clear maxHeap before getting new feeds.
Add Follow(userId, userId) has user should see his own feed. Also use a hashset for Dictionary<int, HashSet<int>> followerHashMap;
11 Trie : use recursion for . match and remember to return false. Use Dictionary<char,TrieNode> for keeping track of all children nodes.
11a For subset, take or not take and the alsways add a new list to result  result.Add(new List<int>(subset));
11b For combination sum, 2 cases arise:-
1. Reduce target and use same index
2. Keep same target and increment index by 1
Add if target == 0 and return if target<0 || index>=n
11c For subsets, we take one index, fix it and swap the no at that index.
        for(int i=index; i<nums.Length; i++) {
            Swap(nums, i, index);
            Solve(index+1, nums, permutation, result);
            Swap(nums,i, index);
        }
11d For unique combination , first sort and then use for the right side tree to avoid duplicates
  while(index+1 <nums.Length && nums[index] == nums[index+1]) {
    index++;
  } 
and then pass index+1 in recursion calls.
12.    PriorityQueue<int,int> maxHeap = new PriorityQueue<int,int>(
        Comparer<int>.Create((a, b) => b.CompareTo(a));
13 Remember to add deep copy of list using new operator for combination sum
13.1 Use a foor loop for index in recursion and use str.Substring(i, i-index+1) for palindrome partition 
13.2 For letter combination create a new string for recursion and to remove use RemoveAt(str.Length-1)
13.3 For n queen, use hashMap for cols, +ve diagonal(row+cols) and -ve diagonal(row-cols).
Add to result if rows>=n
	For jagged array , use 	int[][] jagged_arr = new int[n][];
	Initialize the elements
        jagged_arr[0] = new int[n] 
14 For max area of island use 1 + DFS1 + DFS2 + DF3 + DFS4
14.1 For pacific atlantic ,  we can have DFS for pac,atl from row 0 and last row and then col 0 and col-1 and find union.
14.2 For surrounded regions, run DFS from row 0, last row,col 0, last cols and set to T wherver we have O
Set all other O to X
Set all T to O 
14.3 For walls and gates , use BFS from walls.
14.4 Couse schedule course that has to be completed  first i spart of adj list.
14.5 Couse schedule || - use topolgical sort, with 1st course completed added first in List
14.6 Use union and find for redundant connection
14.7 For valid graph if visitedHasSet.Count == n and there is no cycle starting from node 0.
14.8 For cycle in directed graph, use DFSVisisted Set
14.9 For cycle in undirected grpah, use parent=-1 and parent = node and see if there is abackedge to parent node from child nodes
14.10 Union and find remember for connected components
No of connected components = n -( No. of unions)
15 Adj list can be created as dictionary with list of neighbors
 	Dictionary<int, List<int>> preCoursesMap = new();
        for(int i=0; i<numCourses; i++) {
            preCoursesMap[i] = new List<int>();
        }
        foreach(var pre in prerequisites) {
            var courseToTake = pre[0];
            var courseDependsOn = pre[1];
            preCoursesMap[courseToTake].Add(courseDependsOn);
        }
15.1   Create adjacency list for words with pattern as key and add beginWord to wordList if it does not contain it.
Beter to use HashSet<string>(), List<string> also work though.
	foreach(var word in wordList) {
            for(int i=0; i<word.Length; i++) {
                string pattern = word.Substring(0, i) + "*" + word.Substring(i + 1);;
                adjList.TryAdd(pattern, new HashSet<string>());
                adjList[pattern].Add(word);
            }
        }
15.2 For construct itineraray, we should:-
i) Sort the adjList by keys for obtaining lexographical order.
ii) Return true when result.Count == noOfTickets+1
iii) Use boolean with return in DFS.
iv) Create a copy of adjList[source] and then remove the visited city from copy
v) Use backtracking, as we can goto a city, from where there is no path left to the origin to traverse other cities.
15.3 Continue if visitedSet.Contains(node).
Prim's algo uses a minHeap and visitedSet for finding a MST.
Base condition: if(hashSetVisited.Count == points.Length) {
                	return result;
                }
15.4. For netwok delay, we will use Dijkstra's algorithm and will take account the max time to reach a point
and while adding to ninHep will add time1+time2.
15.5 Swim in rising water - Use minHeap and take maximum of already visited and current point and add.
as swimming can be done only with higher depth.
15.6 For alien dictionary, we figure out:-
i). Length of 2 strings. 
ii). Use minLength
iii) if len(str1)>len(str2) and str2 is a prefix of str1 retun String.Empty
iv) Till minLength, find the diff character , add to adj Likst and break.
v) Add all the character of word to adjList
vi) Use topolgical sort
15.7 BellmanFord k+1 times distance[v] = min(distance[v], distance[u] + weight(u, v))
At every stop, remember to copy the temp array
15 Set dp[0]=0 for min no of ways for coin change
15.1 For house robber II, use base condition, if(n==1) {  return nums[0]; }
16 For word break problem
dp[i] = dp[i + word.Length]; 
16.1 Set default max to 1 for LIS. 
for(int i=nums.Length-1; i>=0; i--) {
            for(int j = i+1; j<nums.Length; j++) {
                if(nums[j] > nums[i]) {
                    dp[i] = Math.Max(dp[i], 1+ dp[j]);
                    max = Math.Max(max, dp[i]);
                }
            }
        }
17 For unique paths, set 1st row and 1st column to 1
18 LCS answer will be dp[m,n]. Loops will run from 1 to m and to n inclusive.
18.1 For Buy and sell with cooldown, use cooldown: index+1, buy:index+1, sell:inde+2
18.2 For interleaving string 
	if(index1<s1.Length && s1[index1]==s3[index1+index2] && Solve(index1+1, index2, s1, s2, s3)) {
            return true;
        }
        if(index2<s2.Length && s2[index2]==s3[index1+index2] && Solve(index1, index2+1, s1, s2, s3)) {
            return true;
        }
In dp with tabulation approach we have to start from index from s1.Length and s2.Length
18.3 result = 1 and 1+Solve (for all directions) and take max for longest increasing path
18.4 For count subsequence. Suppose a="a" and b="" . If b finishes return 1 as we can delete a
if a="" b="a" there is no waty, so return 0;
	if(index2 == t.Length) {
            return 1;
        }
        if(index1 == s.Length) {
            return 0;
        }
        if(s[index1] == t[index2]) {
            result = Solve(index1+1, index2+1, s, t, dp) + Solve(index1+1, index2, s, t, dp);
        } else {
            result = Solve(index1+1, index2, s, t, dp);
        }
18.5 for burst balloon, we will try to burst i balloon at the last, so
           for(int i=left; i<=right; i++) {
            // Pop at the end
            int amount = nums[left-1] * nums[i] * nums[right+1];
            amount += Solve(left, i-1, nums, dp) + Solve(i+1, right, nums, dp);
18.6 For regular expression
        // Add example: aaa    a*a         Delete example: aaab   aaaa*b
        if(index2+1<p.Length && p[index2+1]=='*') {
            return Solve(index1, index2+2, s, p) || (isMatch && Solve(index1+1, index2, s, p));
        }  
18.7 For jump game 2 use , left and right and we will traverse like BFS and check for right<noOfIntervals-1
18.8 For gas station, if balance <=0 , make it to 0 and set start= i+1, and add to deficit. If balance+deficit>=0 return start;
18.9 For hand of straight,  we add count to hashmap, we will use minHeap. we look at the top of minHeap and reduce count by 1
If count==0 , we remove it from minHeap. If peek of the minHeap is not equal to i, we return false.
18.10 If any of triplets value is more , we continue , if any of the other match we add to count
If count == 3 we return tue.
18.11 For partition label, we get the last index of character in hashMap.
We keep an end as maxEnd if maxEnd match the end of a word, we add to list and set start to i+1
18.12 For valid parenthesis, either use DFS an dp or keep
leftMin for ( and leftMax for )
For *, it can be  "", (,) 
so for ( leftMin++, leftMax++ ) leftMin-- leftMax-- else leftMin-- and leftMax++
(*) ())
If leftMin<0, we set it leftMin to 0
()) - If leftMax<0 we return false
18.13 For insert intervals
i) Add as first interval if end is before start of all interval
ii) If start is after end of current interval, we add current interval
iii) Otherwise in case of overlapping , we take min for start and max for end
iv) We add the new interval at the end
18.14 We sort all the intervals. We start from index 1 and use it for prev and current interval.
If lastIntervalEnd >= currentIntervalStart, we take the end as Max of 2 intervals,
otherwise we add currenInterval
18.15 We keep the min to remove the interval with max end while overlapping
  if(currentStart < prevEnd) {
                result++;
                prevEnd = Math.Min(prevEnd, currentEnd);
            } else {
                prevEnd = currentEnd;
            }
18.16 If an overlap, we return false
18.17 For meeting room II, we sort starts and ends. We increase count if something has started,
and decrease if something has ended. We keep track of maximum room.
19 For rotate right by 90 , rotate diagonal and then by column
For rotate left by 90, rotate by column and then by diagonal
19.1 For spiral matrix, get total, keep count and add count<total to every loop
19.2 For plusone, keep carry=1 and add 1 at the end if caary=1.
20 No of counting bits in a range, remember

	if(2*offset == i)  {
                offset = i;
            }
        dp[i] = 1 + dp[i-offset];
21 Remember
Set bit    (bit>>i) | 1     Get bit  (n>>i) & 1
22 Plus 1 , Better reverse or start from end, remember 9 and carry, only carry and no carry
23 For reverse use:-  var reversedNum1 = new string(num1.Reverse().ToArray());
Matrix multiplication - Always reverse. Set(i+j)th position  and carry in (i+j+1)
var reversedNum1 = new string(num1.Reverse().ToArray());
	for(int i=0; i<m; i++) {
            for(int j=0; j<n ; j++) {
                int digit = (reversedNum1[i]-'0') * (reversedNum2[j]-'0');
                int temp = result[i+j] + digit;
                result[i+j+1] += temp/10;
                result[i+j] = temp%10;
            }
        }
24 With dictionary we can use hashMap.GetValueOrDefault((pX, y),0) like this.
25 For hand of straight remove only if count is 0.
26 For valid parenthesis maintain leftMin and leftMax, if leftMax<0 break. If finally, leftMin == 0 return true;
27 While changing array in dp solution , remember to use Array.Copy(source, destination,length);
28 With interleaving check this condition s1[index1] == s3[index1+index2]
29 Redundant connection - Use union and find
30 Use dictionary.TryAdd(key, value) if not sure that key in dict exists
31 Itineary reconstruction. While backtracking, remove the price from n-1 index
34 2 step approach with hashmap for copying random pointers
35 LRU Cache = Doubly ended queue with hashMap
LinkedList can be used for doubly ended queue
AddFirst() -> add at front , Propertied Last -> rear and First-> front.
36 Min Stack Push -> Pushed value = 2*current- min => if min<curr
and popped value = 2*min - value
37 Remove last charcater stringbuilder sb.Remove(index-1,1);
38 For car fleet, check if 2nd time car <= 1st time of car. Sort by position in reverse order.
if(stack.Count > 1 && stack.Peek() <= stack.Skip(1).First()) {
                stack.Pop();
            }     
39 Remember for histogram
Area = height[i]*(next-prev-1)
 if(nextSmallest[i]==-1) {
                nextSmallest[i]= n;
            }
40 No of total combination of pairs n*(n-1)/2
41 Burst balloons. Remember to add 1 at each boundary
42 Interleaving string check for either string is str[i+j]
For sorting a list with list1 we can use list.Sort();
Setting a Bit:
===============
To set a particular bit n in a number x, you can use the expression x |= (1 << n).
Clearing a Bit:
===============
To clear a particular bit n in a number x, you can use the expression x &= ~(1 << n).
Toggling a Bit:
===============
To toggle (flip) a particular bit n in a number x, you can use the expression x ^= (1 << n).
Checking if a Bit is Set:
=========================
To check if a particular bit n is set in a number x, you can use the expression (x & (1 << n)) != 0. This will evaluate to true if the bit is set and false if it's not
Getting the rightmost set digit
================================
Either x & -x    or we can use 
x & ~(x - 1) 

For array odd, we can use (arr.Length & 1) == 1 condition
Use CompareTo instead of a-b with sorting.
Min and max Heaps
==================
Heaps are CBT
Non leaf nodes = n/2-1 to 0, so run heapifyDown for them
1. For building minHeap use heapifyDown
a) Set smallestIndex=i, leftIndex=2*i+1, rightIndex=2*i+2. 
b) Find smallestIndex with leftIndex<n && rightIndex<n checks
c) If smallestIndex!=i, swap and call heapifyDown with smallest index
2. For deletion, swap root with last element, and use heapifyDown with 0 index
3. For insertion , use heapifyUp, while(index>0 && arr[parent(i)]>arr[i]) swap and set i= parent(i)
where parent(i) return (i-1)/2
4. For heap sort
a) Build Max Heap
b) Start from n-1, swap root element with ith element
c) Heapify till ith index

Sorting
=======
BubbleSort
==========
i) i = 1 to <n
ii) j = 0 to <n-i
iii) Compare a[j] a[j+1]
iv) Keep track of swap
v) If no swap already sorted

Selection Sort
==============
i)  0 to <n-1
ii) minIndex=i
ii) j i+1 to <n
iv) update minIndex
v) swap i,minIndex

IS
===
i) i =1 to <n
ii)temp = a[i]
ii) j=i-1
iii) while j>=0
iv) a[j] > temp
	a[j+1] =a[j]
    else break;
v) a[j+1] = temp;

QS
===
i) p 
ii) QS st p-1
ii) QS p+1 end

i) a) pivot =arr[s]
      i = s+1  <=end
      count++
      swap arr[pivot] [s+count]

MS
==
s mid
mid+1 end
merge(arr,s,e)
len1 = mid-start+1
len2 = end-mid

InversionCount
===============
1. Count left MS
2. Add right MS and merge count
3. Count during merge, Remember not to conider = condition  
 if(nums1[index1]>nums2[index2]) {
     nums[mainArrayIndex++] = nums2[index2++];
     // Important condition
     count += len1-index1;
} 
Pascal Triangle
================
1. Any element in a row and column can be given by n-1 C r-1.
int res = 1;
res *= (n-i);
res /= (i+1);
2. The denominator will have r multiplications and numerator will also have same no fo multiplications
eg: - 4C2  = 4*3/1*2 = 6 
3. If row, no starts from 1, and 1st element is 1,  subsequent element can be calculated as:
eg:- 7 row  6C0 = 1   6C1 = 6/1 6C2 = 6*5/1*2=6*(7-2)/(1*2) -> i=2
res*=(n-i)
res/=(i)
so, Pascal Triangle can be created from 1 row to noOfRows
Next smallest palindrome
========================
1. If arr length is 1 and it is between 0 and 8 inclusive return incremented value
2. If palindrome, add 1
3. If arr length is odd
a) take left, mid and right
b) if reverse(left)>right , mirror otherwise left+mid and then plus one and then mirror and take mirror from 1st index
4. If arr length is even
a) take left and right
b) if reverse(left)>right, mirror otherwise left plus one and then mirror
For String Comparison and PlusOne, extra methods to avoid ot of range exception
Frequency greater than N/3
============================
1. If arr[i]==a, countA++
2  Else If arr[i]==b, countB++
3. Else If countA==0 countA=1 a=arr[i]
4. Else If countB==0 countB=1 b=arr[i]
Count countA and countB again and return a orb if count>n/3
Sum of hamming distance
=======================
i -> 1 to <=32
j = 0 to <arr.Length
 count0 => (1<<i)&A[j] ==0 => coun0t++
else
 count1++;
result+= 2* count0*count1;
Wave array
==========
For wave array,  sort the array
Start from 1 with increment 2 and swap 1 and 2nd element and so on
Max Distance
============
Use this to assign 0 to elements of list
 List<int> Lmin = new List<int>(new int[A.Count]);
or List<int> Lmin = Enumerbale.Repeat(0,5).ToList();
We keep 2 arrays Lmin
1. Set first element and for subsequent element set Lminvalue
2. Set last element and for previous element compare and set RmaxValue
Set pointers a and b at 0 and if(Lmin[a]<=Rmax[b]) b++ store the max result; else a++
Min Max Min no of comparisons
=============================
If array size is odd set min and max as a[0], set i=1
else set proper max and min size, set i=2
While i<n-1 check for A[i+1] and A[i] and inside condition determine min and max.
Book allocation Problem
=======================
If noOfBook >student return -1
Find Possible no of books and set the answer as mid
Start with studentCount =0
If arr[i]+noOfPages <=mid ; then noOfPages+=a[i] else studentCount++
If studentCount> givenStudentCount || arr[i]>mid return false
Return true otherwise
Painter Problem
================
Painter problem will follow the book allocation approach
Search for a range
===================
Find first location - After an element is found set end=mid-1;
Find last location - After an element is found set start = mid+1
Min Parenthesis
===============
Keep track of openCount and closeCount
If ( openCount++;
If ) & openCount>0 openCount--
else if ) closeCount++;
return openCount + closeCount
Least common prefix
====================
1. If single, return 
2. Find minimum length of all string
3. Traverse all the strings for min length
4. if character does not match, return result
5. Concat result with the characters within the loop
Other option is to use Trie, and insert and maintain childCount.
If childCount is equal to wordCount, add the char to result
else break.Also break if we reach TerminalWrd.
Justified Text
===============
1. Create a result, line list and a length for total length
2. Check when totalLength+ lineListCount +currentstringLength > maxWidth
3. Find no of spaces by totalSpaces = maxWidth - lineArrayLength
4. For wordCount get count of words in line
5. For spaces use totalSpaceDistribution = totalSpaces/Math.Ma(1,wordCount-1);
Extra spaces = totalSpaces%Math.Max(1,wordCount-1);
Start from 0 to Math.Max(1, wordCount-1), add spaces
line += new String(' ',spaces)
if(extraSpaces>0) line[j] += " "; extraSpaces--
6. Handle last line separately
For joining with space use , lastString =String.Join(" ", line.ToArray);
Find maxWidth - lastString and add remaining trailing spaces.
Array 3 pointers
=================
To find min of maximum difference between A,B ; B,C or C,A we use:-
1. We determine min between A[i],B[j],C[k] and store as min
2. We determine max between A[i],B[j],C[k] and find the diff
3. We save the result of the minimum between result and diff values
4. If min==A[i] we increment i, and if min==A[j] we increment j else k
Merge Sort List
===============
1. If 0 element or 1 element - head is null or head.next is null we return head.
2. We find middle by keeping slow=head and fast=head.next and use the same base condition 1 here as well
3. We find left= head and right=middle.next. We break the link by setting middle.next=null
4. We sort the left part and then the right part and finally merge them.
Insertion Sort List
===================
1. Add a dummy node add set next to head.
2. If current.val >= prev.value, move prev= current ,current = current.next and continue;
3. Set temp = dummy and check untill current.val > temp.next.val
4. Break the link and insert the node between 2 nodes
	    //Break link
  	    prev.next = current.next;
	    // Insert in between
            current.next = temp.next;
            temp.next = current;
	    // Set current to newly linked node
            current = prev.next;
Max Points on a line
=====================
1. Calculate overlapping points
2. Calculate slope after taking gcd of x,y and storing it in a hashMap.
3. Find currentMax as max of 1 and 2
4. Eventually find max as the max of result and currentMax+(overlappingPoints+1)
LCA of a binary tree
====================
1. Find if node exists in tree. If not return -1. For this, use a helper function
2. Return root if root.value == p || root.value ==q
3. Return right if left==null; left if right==null else return root
4. If both are not null , we return root as LCA
Order of People Heights - Segment Tree
======================================
1. All the leaf nodes specify the position of a person
2. We build a segment tree with 4*n nodes and set tree[index]=1 if start == end
3. We query for the K+1st spot as k people are larger for the query
4. If tree[2*index+1]>=k , look in left half from start to mid otherwise go from mid+1 to end.
If start==end return start
5. set the result and update the index position to 0.If mid<=position, look in left half and vice versa
Update the tree[index] = tree[2*index+1] + tree[2*index+2]
Majority element
=================
1. If not set, set it to current num and set count to 1
2. Increment the count if match. If not decrement the count
3. Use if else condition only
Intersecting chords
===================
Catalon's no
// Catalon No - Cn
// Cn = C0*Cn-1+ C1*Cn-2 + C(n-1)C0
// Cn = Sum from O to (n-1) = Ci*C(n-1-i)
Use ling for storing th no
Sum of mtrix equal to 0
========================
1. We have to find each submatrix sum as 
 int top = row>0 ? subMatrixSum[row-1, col] : 0;
 int left = col>0 ? subMatrixSum[row, col-1] : 0;
 int topLeft = Math.Min(row,col) > 0 ? subMatrixSum[row-1, col-1]: 0;
 subMatrixSum[row, col] = A[row][col] + top + left - topLeft;
2. The we create prefixHashMap and store 0 with count as 1 
We fix, R1, R2, and last column and calculate 
currentSum = subMatrixSum[row2, col] - (row1>0 ? subMatrixSum[row1-1, col] : 0);
If hashMap contains currentSum, we increment result with hashMapValue
else set the currentSum count as 1.

Max Operations 10^7
====================
n<20            2^n, n! (brute force, backtracking)
n<3000          DP
3000<n<10^6     2 pointers, greedy, heap, sorting
n>10^6          Binary Search, Math
Repeating subsequence
=====================
    if(i!=j && A[i-1] == A[j-1]) {
        lcs[i,j] = 1+ lcs[i-1, j-1];
    } else {
        lcs[i,j] = Math.Max(lcs[i-1,j], lcs[i,j-1]);
    }
KMP algorithm
=============
For Pattern, we should create longest prefix suffix
1. We set lps[0] = 0 as we don't consider full prefix suffix as string so 0.
2. We set prevLps = 0 and i=1. We itearte till i<pattern.Length
3. i) If pattern[i] == pattern[prevLps] , lps[i] = 1 + prevLps, prevLps++, i++
   ii) Else if prevLps = 0, lps[i]=0 and i++
   iii) Else prevLps = lps[prevLps-1];
For matching pattern,
1. We set i=0 for str, j= 0 for pattern. We iterate from i to str.Length
2. i) If match, we increment i and j
   ii) Else if j==0, we increment i
  iii) Else j = prev[j-1], We set pointer to already matched prefix and suffix
       eg:- aabaa, we set pointer to 2 to match aax, we will not start from 1 as aa is already matched
3. If j==pattern.Length, we retrun i - pattern.Length
4. Else return -1;
This optimizes time complexity from O(m*n) to O(m+n)
Next Permutation
================
BruteForse:- will take n!n to generate and search for next permutation
       i i+1
eg:- 123 54100
         \
      /   \ 
            \ 
     54321
1. Find index such that nums[index]<nums[index+1]. Slope decreased from increasing slope starting from end index.eg:-index=2
2. If no index found, then just reverse eg 12345
3. Find the next no greater than 3 starting from end eg:-4 and swap.
4. Reverse the no starting from index+1 to n-1;
USE Array.Reverse(array, int startIndex, int length) to reverse the array.
Sort O12 Dutch National Flag
=============================
0  low-1 low    mid-1 mid       high high+1 n-1
00000000  11111111111 02101020101010 22222222
low
 02101020101010
mid           high 
1) arr[mid] == 0 
   swap(arr[low],arr[mid]);
   low++;
   mid++;
2) arr[mid] == 1
	mid++;
3) arr[mid] ==2
  swap(arr[mid],arr[high]);
   high--;
Egg Drop Problem - (floors => n, eggs => k)
===========================================
1. If (floors == 0 || floors==1) return floors
2. If eggs==1 return floors as we will have to try for all floors
3. Start from 1st floor x=1;x<=floors;x++
4. Initialize result = Min.MaxValue
5. If it breaks opt1 = Solve(x-1, k-1), if not opt2 = Solve(floors-x, k);
6. result = 1 + Math.Min(result, Math.Max(opt1,opt2));
Merge sorted array without extra space
======================================
1. Set i to last index of 1st arr and j to first index of 2nd array
2. Start while loop if i>=0 and j<n Compare and swap if not sorted. Break in else condition
Gap analysis
1. Add len = m+n and gap=len/2+len%2;. While gap>0, left =0; right= left+gap;
i) If on left and right side, SwapLargest(num1, num2, left, right-m);
ii) If both on right SwapLargest(num2, num2, left-m, right-m); else SwapLargest(num1, num1, left, right);
left++, right++;
2. If gap==1 break;
Max xor between numbers of an array
====================================
1. Add all no to trie
2. Traverse through each no and find max xor
i) Find bit as int bit = (n>>i)&1. Find bit complement as 1-bit and find in trie and move to that need.
If not found move to current bit
Max xor for queries
===================
1. Sort the numbers and quereies based on the constraint
2. Add no till the constraint to trie and find max by passing the number to be Xored with
3. Save the result in hashMap and use it for answer
Remember:- For 2D array iniatialization, use length of rows, int[][] copyQueries = new int[n][]
Array.Copy expects 3 arguments with length as last param.
Reverse Pairs Array Merge Sort
==============================
start     mid      mid+1      end
1. Just before merge write a method
where j=mid+1, i=start;i<=end;i++  and if nums[i] > 2L* nums[j] j++;
2. count += j-(mid+1)
Repeated No
===========
1. Find xor of A[i], i and xor
2. Find the rightMostSetBit= xor&~(xor-1);
3. Set 2 vars zeroes and ones
4. if (rightMostSetBit & A[i])!=0 xor with set of ones elses zeroes
5. Do the same for (rightMostSetBit & i)!=0  with set of ones elses zeroes
6. Find count tom match ones. If count is 2 retirn zeroes and ones & vice-versa.

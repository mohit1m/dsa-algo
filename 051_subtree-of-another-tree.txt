/*
TC: O(s*t)
SC: O(max(H1, H2))

https://leetcode.com/problems/subtree-of-another-tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    private bool isSameTree(TreeNode tree1, TreeNode tree2) {
        if(tree1 == null && tree2 == null) {
            return true;
        }
        if(tree1 != null && tree2!=null && tree1.val == tree2.val) {
            return isSameTree(tree1.left, tree2.left) && isSameTree(tree1.right, tree2.right);
        }
        return false;
    }

    public bool IsSubtree(TreeNode root, TreeNode subRoot) {
        if(subRoot == null) {
            return true;
        }

        if(root == null) {
            return false;
        }

        if(isSameTree(root, subRoot)) {
            return true;
        }
        return IsSubtree(root.left, subRoot) ||  IsSubtree(root.right, subRoot);       
    }
}
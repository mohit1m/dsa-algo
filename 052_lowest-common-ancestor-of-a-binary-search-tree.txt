/*
Recursive
TC: O(nlogn)
SC: O(n)

Iterative
TC: O(nlogn)
SC: O(1)

https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */

public class Solution {
    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
       /*Recursive*/
        /*if(root == null) {
          return root; 
        }

        if(p.val < root.val && q.val < root.val) {
            return LowestCommonAncestor(root.left, p, q);
        } 
        else if (p.val > root.val && q.val > root.val) {
            return LowestCommonAncestor(root.right, p, q);
        }
        return root;*/

        var current = root;
        while(current != null) {
            if(p.val < current.val && q.val < current.val) {
                current = current.left;
            } 
            else if(p.val > current.val && q.val > current.val) {
                current = current.right;
            } else {
                return current;
            }
        }
        return current;
    }
}
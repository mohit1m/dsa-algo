/* https://www.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/ */
class Solution {
    public void AddLeftViewWithoutLeafNode(Node node, ArrayList<Integer> result, int level) {
        if(node == null) {
            return;
        }
        if(node.left == null && node.right == null) {
            return;
        }
        
       // if(result.size() == level) {
            result.add(node.data);
       // }
        if(node.left!=null) {
            AddLeftViewWithoutLeafNode(node.left, result, level+1);
        } else if(node.right!=null) {
            AddLeftViewWithoutLeafNode(node.right, result, level+1);
        }
    }
    
    public void AddLeafNodes(Node node, ArrayList<Integer> result) {
        if(node == null) {
            return;
        }
        if(node.left == null && node.right == null) {
              result.add(node.data);
              return;
        }
        AddLeafNodes(node.left, result);
        AddLeafNodes(node.right, result);
    }
    
    public void AddReverseRightViewWithoutLeafNode(Node node, ArrayList<Integer> result, int level) {
        if(node == null || (node.left == null && node.right == null)) {
            return;
        }
        
        if(node.right!=null) {
            AddReverseRightViewWithoutLeafNode(node.right, result, level+1);
        }
        else if(node.left!=null) {
            AddReverseRightViewWithoutLeafNode(node.left, result, level+1);
        }
        //if(result.size() == level) {
            // wapas aa gaaye (For reverse order)
            result.add(node.data);
       // }
    }
    ArrayList<Integer> boundaryTraversal(Node node) {
        // code here
        
        ArrayList<Integer> result  = new ArrayList<Integer>();

        if(node.left!=null || node.right!=null) {
            result.add(node.data);
        }
        AddLeftViewWithoutLeafNode(node.left, result, 0);
        AddLeafNodes(node, result);
        AddReverseRightViewWithoutLeafNode(node.right, result, 0);
        
        //result.addAll(leftViewList);
        //result.addAll(leafList);
        //Collections.reverse(rightViewList);
        //result.addAll(rightViewList);
        
        return result;
    }
}

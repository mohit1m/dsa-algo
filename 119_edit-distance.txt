/*
https://leetcode.com/problems/edit-distance/
*/
public class Solution {
    /*
    TC: O(m*n)
    SC: O(m*n)
    */
    private int Solve(string word1, string word2, int index1, int index2, int m , int n, int[,] dp) {
        if(index1>= m) {
            return n-index2;
        }
        if(index2>= n) {
            return m-index1;
        }
        if(dp[index1, index2] != -1) {
            return dp[index1, index2];
        }
        if(word1[index1] == word2[index2]) {
            return Solve(word1, word2, index1+1, index2+1, m , n, dp);
        }
        int insert = Solve(word1, word2, index1, index2+1, m , n, dp);
        int del = Solve(word1, word2, index1+1, index2, m , n, dp);
        int repl = Solve(word1, word2, index1+1, index2+1, m , n, dp);
        return dp[index1, index2] = 1+ Math.Min(Math.Min(insert,del), repl);
    }

    /*
    TC: O(m*n)
    SC: O(m*n)
    */
    private int SolveTab(string word1, string word2) {
        int m = word1.Length;
        int n = word2.Length;
        int[,] dp = new int[m+1, n+1];
        for(int index2=0; index2<=n; index2++) {
            dp[m, index2] = n-index2;
        }
        for(int index1=0; index1<=m; index1++) {
            dp[index1, n] = m-index1;
        }
        
       
        for(int index1=m-1; index1>=0; index1--) {
            for(int index2=n-1 ; index2>=0; index2--) {
                if(word1[index1] == word2[index2]) {
                    dp[index1, index2] = dp[index1+1, index2+1];
                } else {
                    int insert = dp[index1, index2+1];
                    int del = dp[index1+1, index2];
                    int repl = dp[index1+1, index2+1];
                    dp[index1, index2] = 1+ Math.Min(Math.Min(insert,del), repl);
                }
            }
        }
        return dp[0,0]; 
    }

    /*
    TC: O(m*n)
    SC: O(n)
    */
    private int SolveTabOptimized(string word1, string word2) {
        int m = word1.Length;
        int n = word2.Length;
        int[] curr = new int[n+1];
        int[] next = new int[n+1];   
          for(int index2=0; index2<=n; index2++) {
            next[index2] = n-index2;
            curr[index2] = n-index2;
          }  
   
        for(int index1=m-1; index1>=0; index1--) { 
               curr[n] = m - index1;        
            for(int index2=n-1 ; index2>=0; index2--) {               
                
                if(word1[index1] == word2[index2]) {
                    curr[index2] = next[index2+1];
                } else {
                    int insert = curr[index2+1];
                    int del = next[index2];
                    int repl = next[index2+1];
                    curr[index2] = 1+ Math.Min(Math.Min(insert,del), repl);
                }
            }
            Array.Copy(curr, next, n+1);
        }
        return next[0]; 
    }

    public int MinDistance(string word1, string word2) {
        int index1=0;
        int index2=0;
        int m = word1.Length;
        int n= word2.Length;
        int[,] dp =new int[m,n];
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                dp[i,j]=-1;
            }
        }

       // return Solve(word1, word2, index1, index2, m , n, dp);
        //return SolveTab(word1, word2);
        return SolveTabOptimized(word1, word2);

    }
}


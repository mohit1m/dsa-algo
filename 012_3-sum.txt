/*
Time Complexity: O(n^2) 
Space Complexity: O(1)

https://leetcode.com/problems/3sum/description/
*/
public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
        IList<IList<int>> ans = new List<IList<int>>();
        Array.Sort(nums);
        int n = nums.Length;
        for(int i=0;i<n;i++){
            int a = nums[i];
            if(i>0 && nums[i]==nums[i-1]) {
                continue;
            }
            int left = i+1;
            int right = n-1;
            while(left<right) {
                int sum = a+ nums[left]+ nums[right];
                if(sum>0){
                    right--;
                }
                else if(sum<0) {
                    left++;
                } else {
                    ans.Add(new List<int>{a,nums[left],nums[right]});
                    left++;
                    while(nums[left] == nums[left-1] && left<right) {
                        left++;
                    }
                }
            }
        }
        return ans;
    }
}
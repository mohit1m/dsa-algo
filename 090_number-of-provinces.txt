/*
TC: O(n^2) 
SC: O(n)

https://leetcode.com/problems/number-of-provinces/description/
https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/
*/
public class Solution {
    int[] parent;
    int[] rank;

    public int Find(int node) {
        int res = node;
        while(res != parent[res]) {
            parent[res] = parent[parent[res]];
            res = parent[res];
        }
        return res;
    }

    public int Union(int node1, int node2) {
        int parent1 = Find(node1);
        int parent2 = Find(node2);
        if(parent1 == parent2) {
            return 0;
        } else if(rank[parent2] > rank[parent1]) {
            parent[parent1] = parent2;
            rank[parent2] += rank[parent1];
        } else {
            parent[parent2] = parent1;
            rank[parent1] += rank[parent2];
        }
        return 1;
    }

    public int FindCircleNum(int[][] isConnected) {
        int n = isConnected.Length;
        parent = new int[n];
        for(int i=0; i<n; i++) {
            parent[i] = i;
        }
        rank = new int[n];
        int result = n;
        for(int i=0; i<n; i++)  {
            for(int j=0; j<n; j++) {
                if(isConnected[i][j] == 1) {
                    result -= Union(i,j);
                }
            }
        }
        return result;
    }
}


/*
TC: O(numCourses+prerequisites)
SC: O(numOfCourses)

https://leetcode.com/problems/course-schedule-ii
Cycle + Topological Sort
*/
public class Solution {
    List<int> result = new List<int>();
    private bool IsCyclicDFS(int course, Dictionary<int,List<int>> adjList, HashSet<int> visited, HashSet<int> dfsVisited) {
        visited.Add(course);
        dfsVisited.Add(course);
        foreach(int adjCourse in adjList[course]) {
            if(!visited.Contains(adjCourse)) {
                bool isCycle = IsCyclicDFS(adjCourse, adjList, visited, dfsVisited);
                if(isCycle) {
                    return true;
                }
            } else if(dfsVisited.Contains(adjCourse))
            {
                return true;
            }
        }
        dfsVisited.Remove(course);
        result.Add(course);
        return false;
    }
    public int[] FindOrder(int numCourses, int[][] prerequisites) {
        Dictionary<int,List<int>> adjList = new  Dictionary<int,List<int>>();
        for(int i=0; i<numCourses; i++) {
            adjList[i] = new List<int>();
        }
        foreach(var pr in prerequisites) {
            adjList[pr[0]].Add(pr[1]);
        }
        HashSet<int> visited = new();
        HashSet<int> dfsVisited = new();

        for(int course=0; course<numCourses ; course++) {
            if(!visited.Contains(course)) {
                if(IsCyclicDFS(course, adjList, visited, dfsVisited)) {
                return new int[] {};
            }
         }
        }
        return result.ToArray();        
    }
}
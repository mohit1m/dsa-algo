/*
TC: O(n^2)
SC: O(n)
https://leetcode.com/problems/longest-increasing-subsequence/description/
*/

public class Solution {
    public int LengthOfLIS(int[] nums) {
        int n = nums.Length;
        int[] dp = new int[n];
        Array.Fill(dp, 1);
        // Set default max to 1
        int max = 1;
        for(int i = n-1; i>=0; i--) {
            for(int j=i+1; j<n; j++) {
                if(nums[j] > nums[i]) {
                    dp[i] = Math.Max(dp[i], 1 + dp[j]);
                    max = Math.Max(max, dp[i]);
                }
            }
        }
        return max;        
    }
}
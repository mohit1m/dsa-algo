/*
TC: O(n)
SC: O(n)

https://leetcode.com/problems/redundant-connection/
*/
public class Solution {
    int[] parent;
    int[] rank;

    private int Find(int node) {
            int result = node;
            while(result!=parent[result]) {
                parent[result] = parent[parent[result]];
                result = parent[result];
            }
            return result;
     }

    private bool Union(int node1, int node2) {
            int parent1 = Find(node1);
            int parent2 =Find(node2);
            if(parent1 == parent2) {
                return false;
            } 
            if(rank[parent1]> rank[parent2]) {
                parent[parent2] = parent1;
                rank[parent1]+=rank[parent2];
            } else {
                parent[parent1] = parent2;
                rank[parent2]+= rank[parent1];
            }
            return true;
    }

    public int[] FindRedundantConnection(int[][] edges) {
        int n = edges.Length;
        parent = new int[n+1];
        rank = new int[n+1];
        for(int i=1; i<=n ;i ++) {
            parent[i] = i;
        }
        
        foreach(var edge in edges) {
            if(!Union(edge[0], edge[1])) {
                return edge;
            }
        }
        return null;        
    }
}

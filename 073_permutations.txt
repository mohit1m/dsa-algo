/*
TC: O(n!)
SC: O(n!)

https://leetcode.com/problems/permutations/submissions/
*/

public class Solution {
    private void Swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private  void Solve(int index, int[] nums, IList<int> permutation, IList<IList<int>> result) {
        if(index>= nums.Length) {
            result.Add(new List<int>(nums));
            return;
        }

        for(int i=index; i<nums.Length; i++) {
            Swap(nums, i, index);
            Solve(index+1, nums, permutation, result);
            Swap(nums,i, index);
        }
    }
    public IList<IList<int>> Permute(int[] nums) {
        IList<IList<int>> result = new List<IList<int>>();
        IList<int> permutation = new List<int>();
        int index = 0;
        Solve(index, nums, permutation, result);
        return result;
    }
}
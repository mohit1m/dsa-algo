/*
TC: O(n)
SC: O(2^n)

https://leetcode.com/problems/generate-parentheses/
*/
public class Solution {
    private void Solve(int n, int openParenCount, int closeParenCount,
     //Stack<string> ans, 
     StringBuilder ans,
     IList<string> result) {
         /*
        Check if openCount == closeCount and openCount==n, add to answer
        If openCount < n , add openCount and backtrack
        If closedCount < openCount , add closedCount nd backtrack
        */
        if(openParenCount == n && closeParenCount == n) {
            result.Add(ans.ToString());
        //    result.Add(String.Join("",ans.Reverse()));
            return;
        }
        if(openParenCount < n) {
            //ans.Push("(");
            ans.Append("(");
            Solve(n, openParenCount+1, closeParenCount, ans, result);
            ans.Remove(ans.Length-1, 1);
            //ans.Pop();
        }
        if(openParenCount > closeParenCount) {
          //  ans.Push(")");
            ans.Append(")");
            Solve(n, openParenCount, closeParenCount+1, ans, result);
            ans.Remove(ans.Length-1, 1);
          //  ans.Pop();
        }
    }

    
   
    public IList<string> GenerateParenthesis(int n) {
        int openParenCount = 0;
        int closeParenCount = 0;
        StringBuilder ans = new StringBuilder();
       // Stack<string> ans = new Stack<string>();
        IList<string> result = new List<string>();
        Solve(n, openParenCount, closeParenCount, ans,  result);
        return result;
    }
}

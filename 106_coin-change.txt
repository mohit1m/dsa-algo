public class Solution {    
    // TC: O(amount * coins)
    // SC: O(amount)
    public int Solve(int[] coins, int amount,int[] dp) {
        if(amount==0) {
            return 0;
        }
        /*if(amount<0) {
            return int.MaxValue;
        }*/

        if(dp[amount]!=-1) {
            return dp[amount];
        }

        int ans = int.MaxValue;
        for(int i=0;i<coins.Length;i++) {
            if(amount>=coins[i]) {
            int min = Solve(coins,amount-coins[i],dp);
            if(min!=int.MaxValue) {
                ans =  Math.Min(ans,1+min);  
                }     
            }
        }
        return dp[amount] = ans;
    }

    // TC: O(amount * coins)
    // SC: O(amount)
    public int SolveTab(int[] coins, int amount) {
        int[] dp= new int[amount+1];
        Array.Fill(dp,int.MaxValue);
        dp[0]=0;
        for(int j=1;j<=amount;j++) {            
            for(int i=0;i<coins.Length;i++) {
                if(j>=coins[i]) {
                    int min = dp[j-coins[i]];
                    if(min!=int.MaxValue) {
                        dp[j] = Math.Min(dp[j],1+min);  
                    }     
                }
            }        
        }
        return dp[amount];
    }

    // TC: O(amount * coins)
    // SC: O(amount)
    public int SolveTab1(int[] coins , int amount) {
        int[] dp = new int[amount+1];
        Array.Fill(dp, amount+1);
        dp[0] = 0;
        for(int i=1; i<=amount; i++) {
            foreach(var c in coins) {
                if(i-c >= 0) {
                    dp[i] = Math.Min(dp[i], 1 + dp[i-c]);
                }
            }
        }
        if(dp[amount] != amount+1) {
            return dp[amount];
        }
        return -1;
    }

    public int CoinChange(int[] coins, int amount) {
        int[] dp= new int[amount+1];
        Array.Fill(dp,-1);
        int ans = SolveTab1(coins,amount);
        /*if(ans==int.MaxValue) {
            return -1;
        }*/
        return ans;
        
    }

}
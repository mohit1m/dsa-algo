/*
TC: O (n)
SC: O(n)

https://leetcode.com/problems/longest-substring-without-repeating-characters/
*/
public class Solution {
    public int LengthOfLongestSubstring(string s) {
        int n = s.Length;
        int maxLength=0;
        int left=0;
        int right=0;
        HashSet<char> hashSet = new HashSet<char>();
        while(right < n) {
            if(hashSet.Contains(s[right])) {
               hashSet.Remove(s[left]);
               left++;
            } else {
                hashSet.Add(s[right]);
                maxLength = Math.Max(maxLength, right-left+1);
                right++;                   
            }
        }
        return maxLength;
    }
}

/*  Probably more easy to understand
public int LengthOfLongestSubstring(string s) {
        int left = 0;
        HashSet<char> hashSet = new();
        int maxSubstringLength = 0;
        for(int right=0; right<s.Length; right++) {
            //if the string contains the right character, reduce the sliding window size
            while(hashSet.Contains(s[right])) {
                hashSet.Remove(s[left]);
                left++;
            }
            hashSet.Add(s[right]);
            maxSubstringLength = Math.Max(right-left+1, maxSubstringLength);
        }  
        return maxSubstringLength;      
    }
*/

/*
TC: O(n)
SC: O(n)

https://leetcode.com/problems/binary-tree-level-order-traversal/description/
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<IList<int>> LevelOrder(TreeNode root) {
        IList<IList<int>> result = new List<IList<int>>();
        if(root == null) {
            return result;
        }
        Queue<TreeNode> q = new Queue<TreeNode>();
        q.Enqueue(root);
        while(q.Count != 0) {
            int size = q.Count;
            List<int> level = new List<int>();
            for(int i=0; i<size; i++) {
                TreeNode node = q.Dequeue();
                level.Add(node.val);
                if(node.left != null) {
                    q.Enqueue(node.left);
                }
                if(node.right != null) {
                    q.Enqueue(node.right);
                }
            }
            result.Add(level);
        }
        return result;        
    }
}
/*
TC: O(nlogn)
SC: O(n)

https://leetcode.com/problems/k-closest-points-to-origin
*/
public class Solution {
    public int[][] KClosest(int[][] points, int k) {
        PriorityQueue<(double, int, int), double> minHeap = new();
        foreach(var point in points) {
            double value = Math.Pow(point[0],2) + Math.Pow(point[1],2);
            minHeap.Enqueue((value, point[0], point[1]),value);
        }

        IList<int[]> result = new List<int[]>();        
        while(k>0) {
            IList<int> output = new List<int>();
            var (distance,x, y) = minHeap.Dequeue();
            result.Add(new int[] {x,y});
            k--;
        }
        return result.ToArray();
    }
}


/* Using max heap
public int[][] KClosest(int[][] points, int k) {
        PriorityQueue<(int,int,int), int> maxHeap = 
        new PriorityQueue<(int,int,int), int>(Comparer<int>.Create((a,b) => b.CompareTo(a)));

        int rows  = points.Length;
        int cols = points[0].Length;
        List<int[]> result = new List<int[]>();
        for(int i=0; i<rows; i++) {
            int x = points[i][0];
            int y = points[i][1];
            int distance = (x*x) + (y*y);
            maxHeap.Enqueue((x,y,distance), distance);
            if(maxHeap.Count > k) {
                maxHeap.Dequeue();
            }            
        }
        for(int i=0; i<k; i++) {
            var (x,y, distance) = maxHeap.Dequeue();
            result.Add(new int[] {x, y});
        }
        return result.ToArray();
    }
*/

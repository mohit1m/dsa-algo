*
TC: O(n)
SC: O(n)
https://leetcode.com/problems/insert-interval/description/
*/
public class Solution {
    public int[][] Insert(int[][] intervals, int[] newInterval) {
        int n = intervals.Length;
        List<int[]> result = new List<int[]>();
        for(int i=0; i<n ; i++) {
            int currentIntervalStart = intervals[i][0];
            int currentIntervalEnd = intervals[i][1];
            int newIntervalStart = newInterval[0];
            int newIntervalEnd = newInterval[1];
            // New interval starts before interval
            if(newIntervalEnd < currentIntervalStart) {
                // Add newInterval
                result.Add(newInterval);
                for(int j = i; j<n; j++) {
                    result.Add(intervals[j]);
                }
                    /*   result.AddRange(
                    intervals.AsEnumerable().Skip(i).ToArray());*/
                return result.ToArray();
            } // New interval start after current interval 
            else if(newIntervalStart > currentIntervalEnd) {
                //Add current interval
                result.Add(intervals[i]);
            } else {
                // Merge Interval
                newInterval[0] = Math.Min(newInterval[0], currentIntervalStart);
                newInterval[1] = Math.Max(newInterval[1], currentIntervalEnd);
            }
        }
        result.Add(newInterval);

        return result.ToArray();        
    }
}
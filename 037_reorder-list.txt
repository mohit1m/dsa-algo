/*
TC: O(n)
SC: O(1)

https://leetcode.com/problems/reorder-list/description/
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public void ReorderList(ListNode head) {
        // Find second part of the list
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast!=null && fast.next!=null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Reverse the list
        ListNode current = slow.next;
        slow.next = null;
        ListNode prev = null;
        ListNode next = null;
        while(current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }

        ListNode first = head;
        ListNode second = prev;
        
        //Check second as it will always be equal or greater in size than first
        while(second != null) {
            // Establish link
            ListNode temp1 = first.next;
            ListNode temp2 =  second.next;
            first.next = second;
            second.next = temp1;
            // Move pointers
            first = temp1;
            second = temp2;
        }
       
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 /*
 TC: O(n)
 SC: O(H)

 https://leetcode.com/problems/diameter-of-binary-tree/
 */

public class Solution {

   int maxDiameter = 0;
     /* More intuitive */
     public int Solve(TreeNode root) {
        if(root == null) {
            return 0;
        }
        int leftHeight = Solve(root.left);
        int rightHeight = Solve(root.right);
        max = Math.Max(max, leftHeight+rightHeight);
        return 1 + Math.Max(leftHeight,rightHeight);
    }

    /*
    private int Solve(TreeNode root) {
        if (root == null) {
            return -1;
        }
        int left = Solve(root.left);
        int right = Solve(root.right);
        maxDiameter = Math.Max(maxDiameter, left + right + 2);
        return 1 + Math.Max(left, right);
    } */

    public int DiameterOfBinaryTree(TreeNode root) {
        Solve(root);
        return maxDiameter;
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
 /*
 TC: O(n)
 SC: O(k)
 https://leetcode.com/problems/reverse-nodes-in-k-group/
 */
public class Solution {
      public ListNode ReverseKGroup(ListNode head, int k) {
        if(head == null) {
            return null;
        }

         // Check if there are at least k nodes remaining to reverse
        ListNode node = head;
        for (int i = 0; i < k; i++) {
            if (node == null) {
                return head; // Less than k nodes remaining, so return the original head
            }
            node = node.next;
        }

        ListNode prev = null;
        ListNode next = null;
        ListNode curr = head;
        int count = 0;
        while(curr!=null && count<k) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            count++;
        }

        if(next!=null) {
            head.next = ReverseKGroup(next,k);
        }
        return prev; 
    }
       /* 
       private ListNode FindKthnode(ListNode curr, int k) {
        while(curr!=null && k>0) {
            curr= curr.next;
            k--; 
        }
        return curr;
       }
      ListNode dummy = new ListNode(0, head);
        ListNode groupPrev = dummy;

        while(true) {
            ListNode kth = FindKthnode(groupPrev,k);
            if(kth == null) {
                break;
            }

            ListNode prev = kth.next;
            ListNode groupNext = kth.next;
            ListNode current = groupPrev.next;
            ListNode next = null;
            while(current!=groupNext) {
                next = current.next;
                current.next = prev;
                prev=current;
                current = next;
            }
            var temp = groupPrev.next;
            groupPrev.next = kth;
            groupPrev = temp;
        }
        return dummy.next;
    }*/
}

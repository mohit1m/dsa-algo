/*
TC: O(nlogn)
SC: O(n)

https://leetcode.com/problems/last-stone-weight
*/
public class Solution {
    public int LastStoneWeight(int[] stones) {
        PriorityQueue<int, int> maxHeap = new PriorityQueue<int,int>(
            Comparer<int>.Create((a, b) => b.CompareTo(a)));

        foreach(var stone in stones) {
            maxHeap.Enqueue(stone, stone);
        }

        while(maxHeap.Count > 1) {
            int first = maxHeap.Dequeue();
            int second = maxHeap.Dequeue();
            if(first > second) {
                maxHeap.Enqueue(first - second, first - second);
            }
        }

        if(maxHeap.Count == 1) {
            return maxHeap.Peek(); 
        }
        return 0;       
    }
}
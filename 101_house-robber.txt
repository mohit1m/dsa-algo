/* https://leetcode.com/problems/house-robber/description/ */
public class Solution {
    
    //TC: O(n)
    //SC: O(n)
    private int Solve(int[] nums, int index, int[] dp) {
        int n = nums.Length;
        if(index >= n) {
             return 0;
        }
        if(dp[index] != -1) {
            return dp[index];
        }
        int inc = nums[index] + Solve(nums, index+2, dp);
        int exl = Solve(nums, index+1, dp);
        return dp[index] = Math.Max(inc,exl);
    }

    
    //TC: O(n)
    //SC: O(n)
    private int SolveTab(int[] nums, int index) {
        int n = nums.Length;
        int[] dp = new int[n+2];
        for( int i=n-1; i>=0; i--) {
            int inc = nums[i] + dp[i+2];
            int exl = dp[i+1];
            dp[i] = Math.Max(inc, exl);
        }
        return dp[0];
    }
    
    //TC: O(n)
    //SC: O(1)
     private int SolveTabOptimized(int[] nums, int index) {
        int n = nums.Length;
        int next1 = 0;
        int next2 = 0;
        if(n == 0) {
            return nums[0];
        }
        for(int i=n-1; i>=0; i--) {
            int inc = nums[i] + next2;
            int exl = next1;
            int current = Math.Max(inc, exl);

            next2 = next1;
            next1  = current;
        }
        return next1;
    }


    public int Rob(int[] nums) {
        int index = 0;
        int n = nums.Length;
        int[] dp = new int[n+1];
        Array.Fill(dp, -1);
        // return SolveTab(nums, index);  
        return SolveTabOptimized(nums, index);
              
    }
}
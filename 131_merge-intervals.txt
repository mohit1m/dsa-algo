/*
TC: O(nlogn)
SC: O(n)
https://leetcode.com/problems/merge-intervals/description/
*/
public class Solution {
    public int[][] Merge(int[][] intervals) {
        Array.Sort(intervals, ((a,b) => a[0].CompareTo(b[0]));
        int n = intervals.Length;
        List<int[]> result = new List<int[]>();
        result.Add(intervals[0]);
        for(int i=1; i<n; i++) {
            int resultLength = result.Count;
            int[] lastInterval = result[resultLength-1];
            int lastIntervalEnd = lastInterval[1];
            int currentIntervalStart = intervals[i][0];
            int currentIntervalEnd = intervals[i][1];
             if(lastIntervalEnd >= currentIntervalStart) {
                 lastInterval[1] = Math.Max(lastIntervalEnd, currentIntervalEnd);
             } else {
                 int[] currentInterval = intervals[i];
                 result.Add(currentInterval);
             }
        }
        return result.ToArray();        
    }
}

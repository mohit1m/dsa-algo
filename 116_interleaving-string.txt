/*
https://leetcode.com/problems/interleaving-string/
*/
public class Solution {
    /*
    TC: O(m*n)
    SC: O(m*n)
    */
    private int Solve(int index1, int index2, int m, int n, int o, string s1, string s2, string s3 , int[,] dp) {
        if(index1 == m && index2 == n  && index1+index2 == o) {
            return 1;
        }

        // if destination string has been exhausted
        if(index1+index2 == o) {
            return 0;
        }

        if(dp[index1, index2] != -1) {
            return dp[index1, index2];
        }
        
        if(index1<m && s1[index1] == s3[index1+index2] &&
            Solve(index1+1 , index2, m , n , o , s1, s2, s3, dp) == 1) {
                return dp[index1, index2] = 1;
            }
        
        if(index2<n && s2[index2] == s3[index1+index2] &&
            Solve(index1, index2+1, m , n , o , s1, s2, s3, dp) == 1) {
                return dp[index1, index2] = 1;
            }
        return dp[index1, index2] = 0;
    }

        private int SolveTab(int m, int n, int o, string s1, string s2, string s3) {
            if(m+n != o) {
                return 0; 
            }
             int[,] dp = new int[m+1, n+1];

             dp[m,n] = 1;
             for(int index1 = m ; index1>=0; index1--) {
                 for(int index2 = n; index2>=0; index2--) {
                    if(index1<m && s1[index1] == s3[index1+index2] &&
                        dp[index1+1 , index2] == 1) {
                            dp[index1, index2] = 1;
                            continue;
                            
                    }
        
                    if(index2<n && s2[index2] == s3[index1+index2] &&
                        dp[index1, index2+1] == 1) {
                            dp[index1, index2] = 1;
                            continue;
                        }
                         dp[index1, index2] = 0;
                    }
                }
            return dp[0,0];
        }

    /*
    TC: O(m*n)
    SC: O(n)
    */
 private int SolveTabOptimized(int m, int n, int o, string s1, string s2, string s3) {
    if (m + n != o) {
        return 0;
    }

    int[] curr= new int[n+1];
    int[] next = new int[n+1];    

    for(int index1 = m ; index1>=0; index1--) {
       for(int index2 = n; index2>=0; index2--) {
          if(index1<m && s1[index1] == s3[index1+index2] &&
                next[index2] == 1) {
                    curr[index2] = 1;
                     continue;                            
           }
        
            if(index2<n && s2[index2] == s3[index1+index2] &&
                        curr[index2+1] == 1) {
                            curr[index2] = 1;
                            continue;
            }       
            curr[index2] = 0;
            if(index1 == m && index2 == n) {
                 curr[n]=1;
            }
            }
            Array.Copy(curr, next, n+1);
     }
    return next[0];
}
    
    public bool IsInterleave(string s1, string s2, string s3) {

        int index1 = 0;
        int index2 = 0;
        int m = s1.Length;
        int n = s2.Length;
        int o = s3.Length;
        int[,] dp = new int[m+1,n+1];
        for(int i=0; i<=m ; i++) {
            for(int j=0; j<=n; j++) {
            dp[i,j] =-1;
            }
        }
        //bool result = Solve(index1, index2, m, n , o ,s1, s2, s3, dp) == 1;
         // bool result = SolveTab( m, n , o ,s1, s2, s3) == 1;
        bool result = SolveTabOptimized( m, n , o ,s1, s2, s3) == 1;
        return result;        
    }
}
public class Solution {
     //TC: O(n)
     //SC: O(1)
     private int SolveTabOptimized(int[] nums, int startIndex, int endIndex) {
        int next1 = 0;
        int next2 = 0;
        
        for(int i=endIndex-1; i>=startIndex; i--) {
            int inc = nums[i] + next2;
            int exl = next1;
            int current = Math.Max(inc, exl);

            next2 = next1;
            next1  = current;
        }
        return next1;
    }

    public int Rob(int[] nums) {
        int n = nums.Length;
        if(n == 1) {
            return nums[0];
        }
        int inclFirstHouse = SolveTabOptimized(nums, 0 , n-1);
        int exclFirstHouse = SolveTabOptimized(nums, 1 , n);
        return Math.Max(inclFirstHouse, exclFirstHouse);        
    }
}
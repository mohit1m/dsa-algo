/*
https://leetcode.com/problems/decode-ways/description/
*/
public class Solution {
    // TC: O(n)
    // SC: O(n)
    private int Solve(string s, int index, int[] dp) {
        int n = s.Length;
        if(index >= n) {
            return 1;
        }
        if(s[index] == '0') {
            return 0;
        }
        if(dp[index] != -1) {
            return dp[index];
        }
        dp[index] = Solve(s, index+1, dp);
        if( index+1 < n && (s[index] =='1' || (s[index] == '2' && s[index+1] < '7' ))) {
            dp[index] += Solve(s, index+2, dp);
        }
        return dp[index];
    }

    // TC: O(n)
    // SC: O(n)
    private int SolveTab(string s) {
        int n = s.Length;
        int[] dp = new int[n+1];
        dp[n] = 1;
        for( int index = n-1; index>=0; index--) {
            if(s[index] == '0') {
                dp[index] = 0;
            } else 
            {
                dp[index] = dp[index+1];
            }
            if( index+1 < n && (s[index] =='1' || (s[index] == '2' && s[index+1] < '7' ))) {
                dp[index] += dp[index+2];
            }
        }
        return dp[0];
    }

    // TC: O(n)
    // SC: O(1)
     private int SolveTabOptimized(string s) {
        int n = s.Length;
        int current = 0;
        int next1 = 1;
        int next2 = 1;
        for( int index = n-1; index>=0; index--) {
            if(s[index] == '0') {
                current = 0;
            } else 
            {
                current = next1;
            }
            if( index+1 < n && (s[index] =='1' || (s[index] == '2' && s[index+1] < '7' ))) {
                current += next2;
            }
            next2 = next1;
            next1 = current;            
        }
        return next1;
    }

    public int NumDecodings(string s) {
        int n = s.Length;
        int[] dp = new int[n];
        Array.Fill(dp, -1);
       // return Solve(s, 0, dp);    
       // return SolveTab(s);  
       return SolveTabOptimized(s); 

    }
}
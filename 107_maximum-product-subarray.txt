/*
https://leetcode.com/problems/maximum-product-subarray/description/
TC: O(n)
SC: O(1)
Maintain current max, current min at each step
and get the max of current num or by getting result 
after multiplying with current no.
*/

public class Solution {
    public int MaxProduct(int[] nums) {
        int currentMin = nums[0];
        int currentMax = nums[0];
        int maxProduct = nums[0];
        int n = nums.Length;
        for(int i=1; i<n; i++) {
            int temp = currentMax * nums[i];
            currentMax = Math.Max(currentMin * nums[i] , Math.Max(temp, nums[i]));
            currentMin = Math.Min(temp , Math.Min(currentMin * nums[i], nums[i]));
            maxProduct = Math.Max(currentMax, maxProduct);
        }
        return maxProduct;
    }
} 
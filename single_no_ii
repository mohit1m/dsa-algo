class Solution {
    /*Option 1
      TC: O(n)
      SC: O(n)*/
    public int singleNumber1(List<int> A) {
        Dictionary<int, int> hashMap = new();
        foreach(var num in A) {
            if(hashMap.ContainsKey(num)) {
                hashMap[num]++;
            } else {
                hashMap[num] = 1;
            }
        }
        
        foreach(var kv in hashMap) {
            if(hashMap[kv.Key] == 1) {
                return kv.Key;
            }
        }
        return -1;
    }
    
    /* Option 2
    TC: O(n)
    SC: O(1)
    */
    public int singleNumber2(List<int> A) {  
        int result = 0;          
        for(int i=0; i<32; i++) {
            int count = 0;  
            for(int j=0; j<A.Count; j++) {
                 if(((1<<i) & A[j])!=0) {
                       count++;
                 }
            }     
            if(count%3 == 1)  {
                result |=  1<<i;
            }      
        }
        return result;
    }
    
    /*Option 3
    TC: O(nlogn)
    SC: O(1)*/
    public int singleNumber3(List<int> A) { 
        A.Sort();
        for(int i=1; i<A.Count; i=i+3) {
            if(A[i-1] !=A[i]) {
                return A[i-1];
            }
        }
        return A[A.Count-1];        
    }
    
    /*Option 4
    TC: O(n)
    SC: O(1)
    */
    public int singleNumber(List<int> A) {
        int ones = 0;
        int twos = 0;
        for(int i=0; i<A.Count; i++) {
            ones = (ones^A[i]) & ~twos;
            twos = (twos^A[i]) & ~ones;
        }
        return ones;
    }
}

/*
TC: O(n)
SC: O(n)

https://leetcode.com/problems/sliding-window-maximum/
*/
public class Solution {
    public int[] MaxSlidingWindow(int[] nums, int k) {
        int n = nums.Length;
        List<int> result = new();
        int left = 0, right = 0;
        LinkedList<int> deQueue = new();
        for(int right=0; right<nums.Length; right++) {
            // r all elements lesser than current element
            while(deQueue.Any() && nums[deQueue.Last.Value] < nums[right]) {
                deQueue.RemoveLast();
            }           
            // add last 
            deQueue.AddLast(right);

            // remove left val from the window - remove out of bound elements from window
            if (left > deQueue.First.Value){
                deQueue.RemoveFirst();
            }

            // If window size is >= add the first element to result
            if(right+1 >= k) {
                result.Add(nums[deQueue.First.Value]);
                left++;
            }
        }
        return result.ToArray();        
    }
}

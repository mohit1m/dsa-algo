public class Solution {
    public int solve(List<List<int>> A) {
        if(A.Count == 0) {
            return 0;
        }
        int rows = A.Count;
        int cols = A[0].Count;
        int[,] subMatrixSum = new int[rows, cols];
        for(int row=0; row<rows; row++) {
            for(int col=0; col<cols; col++) {
                int top = row>0 ? subMatrixSum[row-1, col] : 0;
                int left = col>0 ? subMatrixSum[row, col-1] : 0;
                int topLeft = Math.Min(row,col) > 0 ? subMatrixSum[row-1, col-1]: 0;
                subMatrixSum[row, col] = A[row][col] + top + left - topLeft;
            }
        }        
            
        int sum = 0;
        int result = 0;
        for(int row1=0; row1<rows; row1++) {
            for(int row2=row1; row2<rows; row2++) {
                 Dictionary<int, int> prefixSum = new();
                 prefixSum.Add(0, 1);   
                for(int col = 0; col<cols; col++) {
                    int currentSum = subMatrixSum[row2, col]
                    - (row1>0 ? subMatrixSum[row1-1, col] : 0);
                    
                    if(prefixSum.ContainsKey(currentSum)) {
                        result += prefixSum[currentSum];
                        prefixSum[currentSum]++;
                    } else {
                        prefixSum[currentSum] = 1;
                    }
                }
            }
        }
        return result;
    }
}

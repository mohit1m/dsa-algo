class MinHeap
    {
        //Declaring the required variables and functions
        
        private int[] harr;
        private int capacity, heap_size;
        
        //Constructor for initializing the variables
        public MinHeap(int cap) {
            heap_size = 0; 
            capacity = cap; 
            harr = new int[cap];
        }
        
        //Function to get index of parent of node at index i
        private int parent(int i){
            return (i-1)/2;
        }
        
        //Function to get index of left child of node at index i
        private int left(int i){
            return (2*i+1);
        }
        
        //Function to get index of right child of node at index i
        private int right(int i){
            return (2*i+2);
        }
        
        //Function to extract minimum value in heap and then to store 
        //next minimum value at first index.
        public int extractMin() 
        {
            if (heap_size <= 0) return -1;
            if (heap_size == 1) {
                heap_size--;
                return harr[0];
            }

            int root = harr[0];
            //storing value of leaf node at first index.
            harr[0] = harr[heap_size - 1];
            harr[heap_size - 1] = 0;
            heap_size--;

            //calling heapify function for the first index.
            MinHeapify(0); 

            return root;
        }

        //Function to delete a key at ith index.
        public void deleteKey(int i)
        {
            if (i < heap_size) 
            {
                //decreasing value at ith index to minimum integer value.
                decreaseKey(i, int.MinValue);
                //extracting the minimum value from heap.
                extractMin();
            }
        }

        //Function to insert a value in Heap.
        public void insertKey(int k) 
        {
            heap_size++;
            int i = heap_size - 1;
            //inserting the value at leaf node.
            harr[i] = k;

            while (i != 0 && harr[parent(i)] > harr[i])
            {
                //swapping values of ith index with its parent node
                //if value at parent node is greater.
                swap(harr, i, parent(i));
                i = parent(i);
            }
        }

        //Function to change value at ith index and store that value at first index.
        public void decreaseKey(int i, int new_val) 
        {
            harr[i] = new_val;
            while (i != 0 && harr[parent(i)] > harr[i]) {
                //Swapping the elements if they don't satisfy the min heap property
                swap(harr, i, parent(i));
                i = parent(i);
            }
        }

        /* You may call below MinHeapify function in
           above codes. Please do not delete this code
           if you are not writing your own MinHeapify */
        public void MinHeapify(int i) 
        {
            int l = left(i);
            int r = right(i);
            int smallest = i;
            if (l < heap_size && harr[l] < harr[i]) smallest = l;
            if (r < heap_size && harr[r] < harr[smallest]) smallest = r;
            if (smallest != i) {
                //Swapping the elements if they don't satisfy the min heap property
                swap(harr, i, smallest);
                MinHeapify(smallest);
            }
        }
        
        //Function to swap two elements in an integer array
        private void swap(int[] arr, int i, int j){
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

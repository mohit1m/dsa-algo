/*
TC: O(n)
SC: O(n)

https://leetcode.com/problems/longest-repeating-character-replacement/description/
*/
public class Solution {
     public int CharacterReplacement(string s, int k) {
        int left = 0;
        int maxFreq = 0;
        int longestSubstringLength = 0;
        Dictionary<char, int> hashMap = new();
        for(int right=0; right< s.Length; right++) {
          /*hashMap.TryGetValue(s[right],out int value);
           hashMap[s[right]] = 1 + value;*/
           if(hashMap.ContainsKey(s[right])) {
               hashMap[s[right]]++;
           }
           else {
               hashMap[s[right]] = 1;
           }
           // Get the max frequency characters to minimize k and hence maximizing total string length with unique character
           maxFreq = Math.Max(maxFreq, hashMap[s[right]]);
           while((right-left+1) - maxFreq > k) {
            hashMap[s[left]]--;
            left++;
           }
           longestSubstringLength = Math.Max(longestSubstringLength, right-left+1);
        }
        return longestSubstringLength;
    }
}

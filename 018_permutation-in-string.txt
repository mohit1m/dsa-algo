/*
TC: O(n)
SC: O(n)

https://leetcode.com/problems/permutation-in-string
*/
public class Solution {
    public bool CheckInclusion(string s1, string s2) { 
        if(s1.Length > s2.Length) {
            return false;
        }

        Dictionary<char, int> hashMapS = new();
        Dictionary<char, int> hashMapWindow = new();
        for(int i=0; i<s1.Length; i++) {
            if(hashMapS.ContainsKey(s1[i])) {
                hashMapS[s1[i]]++;
            }
            else {
                hashMapS[s1[i]] = 1;
            }
            if(hashMapWindow.ContainsKey(s2[i])) {
                hashMapWindow[s2[i]]++;
            }
            else {
                  hashMapWindow[s2[i]] = 1;
            }
        }

        int countNeeded = hashMapS.Count;
        int countCurrent = 0;
        foreach(var key in hashMapS.Keys) {
            if(hashMapWindow.ContainsKey(key) && hashMapS[key] == hashMapWindow[key]) {
                countCurrent++;
            }
        }

        int left = 0;
        for(int right=s1.Length; right<s2.Length; right++) {
            if(countNeeded  == countCurrent){
                return true;
            }
            if(hashMapWindow.ContainsKey(s2[right])) {
                hashMapWindow[s2[right]]++;
            }
            else {
                 hashMapWindow[s2[right]]=1;
            }
            if(hashMapS.ContainsKey(s2[right]) && (hashMapWindow[s2[right]] == hashMapS[s2[right]])) {
                countCurrent++;
            } else if (hashMapS.ContainsKey(s2[right]) && (hashMapS[s2[right]]+1  == hashMapWindow[s2[right]])) {
                countCurrent--;
            }
            
            hashMapWindow[s2[left]]--;
            if(hashMapS.ContainsKey(s2[left]) && (hashMapWindow[s2[left]] == hashMapS[s2[left]])) {
                countCurrent++;
            } else if (hashMapS.ContainsKey(s2[left]) && (hashMapS[s2[left]]-1  == hashMapWindow[s2[left]])) {
                countCurrent--;
            }
            left++;
        }
        return countNeeded  == countCurrent;		
    }
}

/*public class Solution {
    private void AddToDictionary(char ch, Dictionary<char,int> hashMap) {
        if(hashMap.ContainsKey(ch)) {
            hashMap[ch]++;
        }
        else {
            hashMap[ch]=1;
        }
    }

    public bool CheckInclusion(string s1, string s2) {
        if (s1.Length > s2.Length) {
            return false;
        }
        
        Dictionary<char, int> hashMapS1 = new Dictionary<char, int>();
        Dictionary<char, int> hashMapWindow = new Dictionary<char, int>();      
        
        foreach (char c in s1) {
            AddToDictionary(c, hashMapS1);
        }

        int left = 0;
        int right = 0;
        int countS1 = hashMapS1.Count;
        int countN = 0;

        while (right < s2.Length) {
            AddToDictionary(s2[right], hashMapWindow);
                        
            if (hashMapS1.ContainsKey(s2[right]) 
            && hashMapS1[s2[right]] == hashMapWindow[s2[right]]) {
                countN++;
            }

            // Adjust the window size to be the same as s1.
            if (right - left + 1 == s1.Length) {
                if (countS1 == countN) {
                    return true;
                }
                char leftChar = s2[left];
                if (hashMapS1.ContainsKey(leftChar) 
                        && hashMapS1[leftChar] == hashMapWindow[leftChar]) {
                    countN--;
                }
                hashMapWindow[leftChar]--;
                left++;
            }
            right++;
        }
        return false;
    }
}*/

class Solution {
    public bool IsPalindrome(string str) {
        int start = 0;
        int end = str.Length - 1;
        while(start<end) {
            if(str[start] != str[end]) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
    public string PlusOne(string str) {
       //Cannot use because of BigInteger values
       // return (long.Parse(str) + 1).ToString();
       
       int carry = 1;
       List<char> list = new List<char>();
       for(int i=str.Length-1 ; i>=0 ;i--) {
           int digit = str[i] - '0';
           int num = digit + carry;           
           list.Add((char)(num%10+'0'));
           carry = num/10;
       }
       if(carry>0) {
           list.Add((char) (carry + '0'));
       }
       list.Reverse();
       return new String(list.ToArray());       
    }
    
   public int Compare(string str1, string str2) {
        int n1 = str1.Length;
        int n2 = str2.Length;
        if(n1>n2) {
            return 1;
        }
        if(n2>n1) {
            return -1;
        }
        for(int i=0; i<n1; i++) {
            if(str1[i] > str2[i]) {
                return 1;
            }
            if(str1[i] < str2[i]) {
                return -1;
            }
        }
        return 0;
    }
    
    public string Reverse(string str) {
        return new string(str.Reverse().ToArray());
    }
    
    public string ProcessOdd(string str) {
        int start = 0;
        int end = str.Length-1;
        int midPoint = start+(end-start)/2;        
        string left = str.Substring(0, midPoint);      
        string mid = str.Substring(midPoint, 1);
        string right = str.Substring(midPoint+1);
        
        var reverseLeft  = Reverse(left);        
        int val = Compare(reverseLeft, right);
        
        // Concat left, mid and revrseLeft if reverseLeft>right
        // Else concat left+mid and add 1 and reverse and take from index 1
        if(val==1) {
            return String.Concat(left, mid, reverseLeft.ToString());
        } else {
           string leftMidPlusOne = PlusOne(String.Concat(left, mid));
           return String.Concat(leftMidPlusOne, Reverse(leftMidPlusOne).Substring(1));
        }
        
    }
    
    public string ProcessEven(string str) {
        int midPlusOne = str.Length/2;
        string left = str.Substring(0, midPlusOne);
        string right = str.Substring(midPlusOne);
        var reverseLeft  = Reverse(left);
        int val = Compare(reverseLeft, right);
        
        //Concat left and revrseLeft if reverseLeft>right
        // Else add 1 to left and reverse and take reverse of leftPlusOne
        if(val==1) {
            return String.Concat(left, reverseLeft.ToString());
        } else {
           string leftPlusOne = PlusOne(String.Concat(left));
           return String.Concat(leftPlusOne, Reverse(leftPlusOne));
        }         
    }
    
    public string solve(string A) {
        
        if(A.Length==1 && A[0]>='0' && A[0]<='8') {
            return (int.Parse(A)+1).ToString();
        }
        // Check if IsPalindrome
        // Add 1 and process
        if(IsPalindrome(A)) {
            A = PlusOne(A);
        }
        
               
        string result = string.Empty;        
        //Odd
        if((A.Length&1)==1) {
            result = ProcessOdd(A);
        } else {
            result = ProcessEven(A);
        }
        // Even
        return result;
    }
}

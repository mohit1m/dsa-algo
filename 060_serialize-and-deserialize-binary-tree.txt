/*
TC: O(n)
SC: O(H)

https://leetcode.com/problems/serialize-and-deserialize-binary-tree/description/
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    int index = 0;
    private void serializeDFS(TreeNode root, List<string> encodedList) {
        if(root == null) {
            encodedList.Add("N");
            return;
        }
        encodedList.Add(root.val.ToString());
        serializeDFS(root.left, encodedList);
        serializeDFS(root.right, encodedList);
    }

    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        List<string> encodedList = new List<string>();
        serializeDFS(root, encodedList);
        var encodedString = String.Join(",", encodedList);
        return encodedString;
    }

  
    private TreeNode deserializeDFS(string[] nodes) {
       string node = nodes[index];
       if(node == "N") {
           index++;
           return null;
       }
       TreeNode treeNode = new TreeNode(int.Parse(node));
       index++;
       treeNode.left = deserializeDFS(nodes);
       treeNode.right = deserializeDFS(nodes);
       return treeNode;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
      var nodes = data.Split(",");
      return deserializeDFS(nodes);  
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
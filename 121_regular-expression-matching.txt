/*
TC: O(m*n)
SC: O(m*n)

https://leetcode.com/problems/regular-expression-matching/
*/
public class Solution {
    private bool Solve(int index1, int index2, string s, string p, int m, int n, Dictionary<(int,int), bool> dp) {
        if(index1>=m && index2>=n) {
            return true;
        }
        if(index2>=n) {
            return false;
        }
        if(dp.ContainsKey((index1,index2))) {
            return dp[(index1,index2)];
        }

        bool match = index1<m && (s[index1] == p[index2] || p[index2] == '.');

        if(index2+1<n  && p[index2+1] == '*') {
            return dp[(index1,index2)] = (Solve(index1, index2+2 ,s, p , m , n, dp) ||
            (match && Solve(index1+1, index2 ,s, p , m , n, dp))); 
        }
    
        if(match) {
            return dp[(index1,index2)]= Solve(index1+1, index2+1 ,s , p , m , n, dp);
        } 
         
        return dp[(index1,index2)]= false;
    }

    private bool SolveTab(string s, string p) {
        int m = s.Length;
        int n = p.Length;
        Dictionary<(int, int), bool> dp = new Dictionary<(int, int), bool>();

        for (int index1 = m; index1 >= 0; index1--) {
            for (int index2 = n; index2 >= 0; index2--) {
                dp[(index1, index2)] = false;
            }
        }
        dp[(m, n)] = true;

        for (int index1 = m; index1 >= 0; index1--) {
            for (int index2 = n-1 ; index2 >= 0; index2--) {
                bool match = index1 < m && (s[index1] == p[index2] || p[index2] == '.');

                if (index2 + 1 < n && p[index2 + 1] == '*') {
                    dp[(index1, index2)] = dp[(index1, index2 + 2)] || (match && dp[(index1 + 1, index2)]);
                } else {
                    dp[(index1, index2)] = match && dp[(index1 + 1, index2 + 1)];
                }
            }
        }
        return dp[(0, 0)];
}

    public bool IsMatch(string s, string p) {
        int m = s.Length;
        int n = p.Length;
        int index1 = 0;
        int index2 = 0;
        Dictionary<(int,int), bool> dp = new();
        // return Solve(index1, index2, s, p, m, n, dp); 
        return SolveTab(s, p);        

    }
}
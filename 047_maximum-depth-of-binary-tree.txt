/*
TC: O(n)
SC: O(n)

https://leetcode.com/problems/maximum-depth-of-binary-tree/description/
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int MaxDepth(TreeNode root) {
        if(root == null) {
            return 0;
        }
        return 1+ Math.Max(MaxDepth(root.left), MaxDepth(root.right));

        
        /* Level Order Traversal */
       /* if(root == null) {
            return 0;
        }
        int level = 0;
        Queue<TreeNode> q = new Queue<TreeNode>();
        q.Enqueue(root);
        
        while(q.Count != 0) { 
            int size = q.Count;        
            for(int i=0; i<size; i++) {
                 TreeNode node = q.Dequeue();
                 if(node.left != null ) {
                     q.Enqueue(node.left);
                 }
                 if(node.right != null ) {
                     q.Enqueue(node.right);
                 }
            }
            level++;
        }
        return level;*/
    }
}
/*
TC: O(m*n)
SC: O(m*n)

https://leetcode.com/problems/longest-increasing-path-in-a-matrix/
*/
public class Solution {
    private int Solve(int row, int col, int rows, int cols, int[][] matrix, int prevValue,
    int[,] dp) {
        if(row < 0 || row>=rows || col<0 || col>=cols || matrix[row][col] <= prevValue) {
            return 0;
        }

        if(dp[row,col] != -1) {
            return dp[row,col];
        }

        int result = 1;
        int value = matrix[row][col];
        result = Math.Max(result, 1+ Solve(row+1, col, rows, cols, matrix, value, dp));  
        result = Math.Max(result, 1+ Solve(row-1, col, rows, cols, matrix, value, dp));  
        result = Math.Max(result, 1+ Solve(row, col+1, rows, cols, matrix, value, dp));  
        result = Math.Max(result, 1+ Solve(row, col-1, rows, cols, matrix, value, dp));

        return dp[row,col] = result;
    }

    public int LongestIncreasingPath(int[][] matrix) {
        int rows = matrix.Length;
        int cols = matrix[0].Length;
        int row = 0;
        int col= 0;
        int result = 0;
        int[,] dp = new int[rows, cols];
        for(int i=0; i<rows; i++) {
            for(int j=0; j<cols; j++) {
                dp[i,j] = -1;
            }
        }
        for(int i=0; i<rows; i++) {
            for(int j=0; j<cols; j++) {
                result = Math.Max(result, Solve(i, j, rows, cols, matrix, -1, dp));        
            }
        }
        return result;       
    }
}